#+TITLE: EMACS Configuration
#+AUTHOR: Amogh Jalihal

* Preliminaries
  This is an org-mode file with tangled lisp code with my configurations. There is nothing smart about this setup beyond the accompanying init file which contains the following lines which extracts the babel source blocks and loads the resulting .el file.

#+BEGIN_EXAMPLE
(add-to-list 'package-archives
	     '("melpa" . "https://melpa.org/packages/") t)
(require 'package)
(package-initialize)

(org-babel-load-file "~/.emacs.d/config.org")
#+END_EXAMPLE

I would love to hear your feedback on this setup!
* Package initialize
#+BEGIN_SRC emacs-lisp
;;(require 'package)
;;(package-initialize)
;;(require 'cl-lib)
#+END_SRC
* Where to look for packages
[2019-01-31 Thu]
#+begin_src emacs-lisp
  (add-to-list 'load-path
               "~/.emacs.d/elpa/helm") ; facultative when installed with make install

  (add-to-list 'load-path
               "~/.emacs.d/elpa/helm-bibtex")

  (add-to-list 'load-path
               "~/.emacs.d/plugins/yasnippet")

  (add-to-list 'load-path
               "~/.emacs.d/lisp/")

   (add-to-list 'load-path
                "~/.emacs.d/elpa/ob-ipython/")

   (add-to-list 'load-path
                "~/.emacs.d/elpa/ox-ipynb/")

  (add-to-list 'load-path
               "~/projects/tidal")

  (add-to-list 'load-path "/usr/share/org-mode/lisp")

  (add-to-list 'load-path
               "~/.emacs.d/plugins/org-alert")


#+end_src

#+RESULTS:
| ~/.emacs.d/plugins/org-alert | /home/jalihal/.emacs.d/elpa/org-plus-contrib-20190204 | /home/jalihal/.emacs.d/elpa/ace-link-20190127.1654 | /home/jalihal/.emacs.d/elpa/avy-20190204.1201 | /home/jalihal/.emacs.d/elpa/cdlatex-20190130.1419 | /home/jalihal/.emacs.d/elpa/company-20190205.1900 | /home/jalihal/.emacs.d/elpa/dash-20190128.1920 | /home/jalihal/.emacs.d/elpa/docker-20190104.1004 | /home/jalihal/.emacs.d/elpa/elpy-20190130.2109 | /home/jalihal/.emacs.d/elpa/emms-20190206.1537 | /home/jalihal/.emacs.d/elpa/evil-20190104.1026 | /home/jalihal/.emacs.d/elpa/f-20190109.906 | /home/jalihal/.emacs.d/elpa/ghub-20190127.2354 | /home/jalihal/.emacs.d/elpa/google-translate-20190206.1229 | /home/jalihal/.emacs.d/elpa/goto-chg-20190110.2114 | /home/jalihal/.emacs.d/elpa/gruvbox-theme-20190128.838 | /home/jalihal/.emacs.d/elpa/helm-20190206.659 | /home/jalihal/.emacs.d/elpa/helm-bibtex-20190113.1845 | /home/jalihal/.emacs.d/elpa/helm-core-20190205.1337 | /home/jalihal/.emacs.d/elpa/hydra-20190206.1051 | /home/jalihal/.emacs.d/elpa/ivy-20190207.1146 | /home/jalihal/.emacs.d/elpa/json-mode-20190123.422 | /home/jalihal/.emacs.d/elpa/julia-mode-20190111.2044 | /home/jalihal/.emacs.d/elpa/magit-20190202.1535 | /home/jalihal/.emacs.d/elpa/math-symbol-lists-20190102.1831 | /home/jalihal/.emacs.d/elpa/org-20190204 | /home/jalihal/.emacs.d/elpa/org-brain-20190111.1227 | /home/jalihal/.emacs.d/elpa/org-download-20190114.1600 | /home/jalihal/.emacs.d/elpa/org-edna-1.0.2 | /home/jalihal/.emacs.d/elpa/org-noter-20190121.2140 | /home/jalihal/.emacs.d/elpa/org-ref-20190118.1502/citeproc/csl | /home/jalihal/.emacs.d/elpa/org-ref-20190118.1502/citeproc | /home/jalihal/.emacs.d/elpa/org-ref-20190118.1502 | /home/jalihal/.emacs.d/elpa/org-variable-pitch-20190128.2051 | /home/jalihal/.emacs.d/elpa/pdf-tools-20190129.1822 | /home/jalihal/.emacs.d/elpa/php-mode-20190109.1320 | /home/jalihal/.emacs.d/elpa/poet-theme-20190127.2220 | /home/jalihal/.emacs.d/elpa/smartparens-20190128.1747 | /home/jalihal/.emacs.d/elpa/spacemacs-theme-20190116.2107 | /home/jalihal/.emacs.d/elpa/tablist-20190129.1813 | /home/jalihal/.emacs.d/elpa/tidal-20190108.1748 | /home/jalihal/.emacs.d/elpa/org-ref-20181221.1716/citeproc/csl | /home/jalihal/.emacs.d/elpa/org-ref-20181221.1716/citeproc | /usr/share/org-mode/lisp | ~/projects/tidal | ~/.emacs.d/elpa/ox-ipynb/ | ~/.emacs.d/elpa/ob-ipython/ | ~/.emacs.d/lisp/ | ~/.emacs.d/plugins/yasnippet | ~/.emacs.d/elpa/helm-bibtex | ~/.emacs.d/elpa/helm | /home/jalihal/.emacs.d/elpa/ac-math-20141116.2127 | /home/jalihal/.emacs.d/elpa/ace-link-20181210.1454 | /home/jalihal/.emacs.d/elpa/auctex-12.1.1/ | /home/jalihal/.emacs.d/elpa/auctex-12.1.1 | /home/jalihal/.emacs.d/elpa/avy-20181126.1705 | /home/jalihal/.emacs.d/elpa/calfw-20180118.45 | /home/jalihal/.emacs.d/elpa/calfw-org-20160303.258 | /home/jalihal/.emacs.d/elpa/captain-1.0.3 | /home/jalihal/.emacs.d/elpa/cdlatex-20140707.1126 | /home/jalihal/.emacs.d/elpa/chronos-20150602.1529 | /home/jalihal/.emacs.d/elpa/column-enforce-mode-20171030.1900 | /home/jalihal/.emacs.d/elpa/dash-functional-20180107.1618 | /home/jalihal/.emacs.d/elpa/diminish-20170419.1736 | /home/jalihal/.emacs.d/elpa/docker-20181215.1826 | /home/jalihal/.emacs.d/elpa/docker-tramp-20170207.325 | /home/jalihal/.emacs.d/elpa/elfeed-org-20181015.1100 | /home/jalihal/.emacs.d/elpa/elfeed-20181127.1943 | /home/jalihal/.emacs.d/elpa/elpy-20181228.1721 | /home/jalihal/.emacs.d/elpa/company-20181221.1538 | /home/jalihal/.emacs.d/elpa/emms-20181122.1932 | /home/jalihal/.emacs.d/elpa/esup-20180727.342 | /home/jalihal/.emacs.d/elpa/evil-20181206.1209 | /home/jalihal/.emacs.d/elpa/find-file-in-project-20181217.246 | /home/jalihal/.emacs.d/elpa/ghub-20190102.109 | /home/jalihal/.emacs.d/elpa/git-gutter-20161105.1356 | /home/jalihal/.emacs.d/elpa/git-timemachine-20181204.1546 | /home/jalihal/.emacs.d/elpa/goto-chg-20181228.1303 | /home/jalihal/.emacs.d/elpa/graphql-20180912.31 | /home/jalihal/.emacs.d/elpa/gruvbox-theme-20181013.1144 | /home/jalihal/.emacs.d/elpa/autothemer-20180920.923 | /home/jalihal/.emacs.d/elpa/helm-cmd-t-20170125.1459 | /home/jalihal/.emacs.d/elpa/helm-swoop-20180215.1154 | /home/jalihal/.emacs.d/elpa/highlight-indentation-20181204.839 | /home/jalihal/.emacs.d/elpa/json-mode-20180718.809 | /home/jalihal/.emacs.d/elpa/json-reformat-20160212.853 | /home/jalihal/.emacs.d/elpa/json-snatcher-20150512.347 | /home/jalihal/.emacs.d/elpa/julia-mode-20180816.2117 | /home/jalihal/.emacs.d/elpa/kanban-20170418.810 | /home/jalihal/.emacs.d/elpa/magit-20190102.107 | /home/jalihal/.emacs.d/elpa/git-commit-20190102.107 | /home/jalihal/.emacs.d/elpa/magit-popup-20181204.2031 | /home/jalihal/.emacs.d/elpa/math-symbol-lists-20170221.1353 | /home/jalihal/.emacs.d/elpa/matlab-mode-20180928.1526 | /home/jalihal/.emacs.d/elpa/md4rd-20181209.512 | /home/jalihal/.emacs.d/elpa/hierarchy-20171221.1151 | /home/jalihal/.emacs.d/elpa/minimap-1.2 | /home/jalihal/.emacs.d/elpa/notify-2010.8.20 | /home/jalihal/.emacs.d/elpa/notmuch-20181208.1245 | /home/jalihal/.emacs.d/elpa/ob-translate-20170720.1919 | /home/jalihal/.emacs.d/elpa/google-translate-20181202.56 | /home/jalihal/.emacs.d/elpa/olivetti-20180531.737 | /home/jalihal/.emacs.d/elpa/openwith-20120531.2136 | /home/jalihal/.emacs.d/elpa/org-alert-20180524.133 | /home/jalihal/.emacs.d/elpa/org-brain-20181228.4 | /home/jalihal/.emacs.d/elpa/org-bullets-20180208.2343 | /home/jalihal/.emacs.d/elpa/org-dashboard-20171223.1924 | /home/jalihal/.emacs.d/elpa/org-download-20180925.1528 | /home/jalihal/.emacs.d/elpa/org-drill-table-20180115.1009 | /home/jalihal/.emacs.d/elpa/org-edna-1.0.1 | /home/jalihal/.emacs.d/elpa/org-gnome-20150614.1457 | /home/jalihal/.emacs.d/elpa/gnome-calendar-20161110.1256 | /home/jalihal/.emacs.d/elpa/alert-20181022.1742 | /home/jalihal/.emacs.d/elpa/log4e-20170401.1304 | /home/jalihal/.emacs.d/elpa/gntp-20141025.250 | /home/jalihal/.emacs.d/elpa/org-noter-20181106.2341 | /home/jalihal/.emacs.d/elpa/org-plus-contrib-20181230 | /home/jalihal/.emacs.d/elpa/org-present-20180303.2330 | /home/jalihal/.emacs.d/elpa/org-ref-20181221.1716 | /home/jalihal/.emacs.d/elpa/key-chord-20160227.1238 | /home/jalihal/.emacs.d/elpa/hydra-20181128.1716 | /home/jalihal/.emacs.d/elpa/ivy-20181223.2002 | /home/jalihal/.emacs.d/elpa/helm-bibtex-20181030.2142 | /home/jalihal/.emacs.d/elpa/biblio-20161014.2304 | /home/jalihal/.emacs.d/elpa/biblio-core-20160901.1815 | /home/jalihal/.emacs.d/elpa/f-20180106.922 | /home/jalihal/.emacs.d/elpa/helm-20181222.848 | /home/jalihal/.emacs.d/elpa/helm-core-20181225.639 | /home/jalihal/.emacs.d/elpa/htmlize-20180923.1829 | /home/jalihal/.emacs.d/elpa/org-variable-pitch-20181206.1451 | /home/jalihal/.emacs.d/elpa/ox-rst-20180315.13 | /home/jalihal/.emacs.d/elpa/org-20181230 | /home/jalihal/.emacs.d/elpa/parsebib-20181219.928 | /home/jalihal/.emacs.d/elpa/pdf-tools-20181221.1913 | /home/jalihal/.emacs.d/elpa/php-mode-20181228.207 | /home/jalihal/.emacs.d/elpa/poet-theme-20190101.2245 | /home/jalihal/.emacs.d/elpa/popwin-20150315.1300 | /home/jalihal/.emacs.d/elpa/pretty-mode-20160614.1846 | /home/jalihal/.emacs.d/elpa/pyvenv-20181228.1722 | /home/jalihal/.emacs.d/elpa/request-20181129.1138 | /home/jalihal/.emacs.d/elpa/sclang-extensions-20160509.338 | /home/jalihal/.emacs.d/elpa/s-20180406.808 | /home/jalihal/.emacs.d/elpa/auto-complete-20170125.245 | /home/jalihal/.emacs.d/elpa/popup-20160709.1429 | /home/jalihal/.emacs.d/elpa/sexy-monochrome-theme-20180526.808 | /home/jalihal/.emacs.d/elpa/smart-mode-line-20180926.1036 | /home/jalihal/.emacs.d/elpa/rich-minority-20170813.1322 | /home/jalihal/.emacs.d/elpa/smartparens-20190112.1318 | /home/jalihal/.emacs.d/elpa/dash-20180910.1856 | /home/jalihal/.emacs.d/elpa/spacemacs-theme-20181107.1725 | /home/jalihal/.emacs.d/elpa/ssh-20120904.2042 | /home/jalihal/.emacs.d/elpa/tablist-20170220.335 | /home/jalihal/.emacs.d/elpa/telepathy-20131209.1258 | /home/jalihal/.emacs.d/elpa/tidal-20181219.900 | /home/jalihal/.emacs.d/elpa/haskell-mode-20181122.823 | /home/jalihal/.emacs.d/elpa/tree-mode-20151104.1331 | /home/jalihal/.emacs.d/elpa/treepy-20180724.656 | /home/jalihal/.emacs.d/elpa/twittering-mode-20181121.1402 | /home/jalihal/.emacs.d/elpa/typo-20171209.1023 | /home/jalihal/.emacs.d/elpa/undo-tree-20170706.246 | /home/jalihal/.emacs.d/elpa/use-package-20181119.2350 | /home/jalihal/.emacs.d/elpa/bind-key-20180513.430 | /home/jalihal/.emacs.d/elpa/visual-regexp-20170301.116 | /home/jalihal/.emacs.d/elpa/which-key-20181114.1432 | /home/jalihal/.emacs.d/elpa/with-editor-20181113.1845 | /home/jalihal/.emacs.d/elpa/async-20181224.454 | /home/jalihal/.emacs.d/elpa/yasnippet-20181015.1212 | /usr/local/share/emacs/26.1/site-lisp | /usr/local/share/emacs/site-lisp | /usr/local/share/emacs/site-lisp/helm | /usr/local/share/emacs/26.1/lisp | /usr/local/share/emacs/26.1/lisp/vc | /usr/local/share/emacs/26.1/lisp/url | /usr/local/share/emacs/26.1/lisp/textmodes | /usr/local/share/emacs/26.1/lisp/progmodes | /usr/local/share/emacs/26.1/lisp/play | /usr/local/share/emacs/26.1/lisp/org | /usr/local/share/emacs/26.1/lisp/nxml | /usr/local/share/emacs/26.1/lisp/net | /usr/local/share/emacs/26.1/lisp/mh-e | /usr/local/share/emacs/26.1/lisp/mail | /usr/local/share/emacs/26.1/lisp/leim | /usr/local/share/emacs/26.1/lisp/language | /usr/local/share/emacs/26.1/lisp/international | /usr/local/share/emacs/26.1/lisp/image | /usr/local/share/emacs/26.1/lisp/gnus | /usr/local/share/emacs/26.1/lisp/eshell | /usr/local/share/emacs/26.1/lisp/erc | /usr/local/share/emacs/26.1/lisp/emulation | /usr/local/share/emacs/26.1/lisp/emacs-lisp | /usr/local/share/emacs/26.1/lisp/cedet | /usr/local/share/emacs/26.1/lisp/calendar | /usr/local/share/emacs/26.1/lisp/calc | /usr/local/share/emacs/26.1/lisp/obsolete |

* Common Lisp
** Require
#+BEGIN_SRC emacs-lisp
(require 'cl)
#+END_SRC
* Emacs global setttings
** Theme
+As of <2018-01-07 Sun>, I am using theme-changer.el to use a light theme during the day and dark theme at night.+
+Disable theme changer by commenting out lines in the [[*Theme Changer][Theme Changer]] entry.+
Reverted
#+BEGIN_SRC emacs-lisp
  ;;(load-theme 'gruvbox t) 
  ;;(load-theme 'sexy-monochrome t)
  ;; Modified on 2018-02-14
  ;; (load-theme 'spacemacs-dark t)
#+END_SRC
<2018-06-20 Wed>
From https://emacs.stackexchange.com/questions/3112/how-to-reset-color-theme
#+BEGIN_SRC emacs-lisp
  ;; (defadvice load-theme (before theme-dont-propagate activate)
  ;; (mapcar #'disable-theme custom-enabled-themes))

#+END_SRC

#+RESULTS:
: load-theme

[2019-02-21 Thu 20:42]
Cyberpunk theme!
#+begin_src emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/lisp/")
  (load-theme 'cyberpunk-2019 t)

  (require 'powerline)
  (powerline-default-theme)
#+end_src

#+RESULTS:
| %e | (:eval (let* ((active (powerline-selected-window-active)) (mode-line-buffer-id (if active (quote mode-line-buffer-id) (quote mode-line-buffer-id-inactive))) (mode-line (if active (quote mode-line) (quote mode-line-inactive))) (face0 (if active (quote powerline-active0) (quote powerline-inactive0))) (face1 (if active (quote powerline-active1) (quote powerline-inactive1))) (face2 (if active (quote powerline-active2) (quote powerline-inactive2))) (separator-left (intern (format powerline-%s-%s (powerline-current-separator) (car powerline-default-separator-dir)))) (separator-right (intern (format powerline-%s-%s (powerline-current-separator) (cdr powerline-default-separator-dir)))) (lhs (list (powerline-raw %* face0 (quote l)) (when powerline-display-buffer-size (powerline-buffer-size face0 (quote l))) (when powerline-display-mule-info (powerline-raw mode-line-mule-info face0 (quote l))) (powerline-buffer-id (` (mode-line-buffer-id (, face0))) (quote l)) (when (and (boundp (quote which-func-mode)) which-func-mode) (powerline-raw which-func-format face0 (quote l))) (powerline-raw   face0) (funcall separator-left face0 face1) (when (and (boundp (quote erc-track-minor-mode)) erc-track-minor-mode) (powerline-raw erc-modified-channels-object face1 (quote l))) (powerline-major-mode face1 (quote l)) (powerline-process face1) (powerline-minor-modes face1 (quote l)) (powerline-narrow face1 (quote l)) (powerline-raw   face1) (funcall separator-left face1 face2) (powerline-vc face2 (quote r)) (when (bound-and-true-p nyan-mode) (powerline-raw (list (nyan-create)) face2 (quote l))))) (rhs (list (powerline-raw global-mode-string face2 (quote r)) (funcall separator-right face2 face1) (unless window-system (powerline-raw (char-to-string 57505) face1 (quote l))) (powerline-raw %4l face1 (quote l)) (powerline-raw : face1 (quote l)) (powerline-raw %3c face1 (quote r)) (funcall separator-right face1 face0) (powerline-raw   face0) (powerline-raw %6p face0 (quote r)) (when powerline-display-hud (powerline-hud face0 face2)) (powerline-fill face0 0)))) (concat (powerline-render lhs) (powerline-fill face2 (powerline-width rhs)) (powerline-render rhs)))) |

** Poet Theme customizations
[2019-01-02 Wed]
#+begin_src emacs-lisp
  ;;   (let* ((variable-tuple
  ;;           (cond ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
  ;;                 ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
  ;;                 ((x-list-fonts "Verdana")         '(:font "Verdana"))
  ;;                 ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
  ;;                 (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
  ;;          (base-font-color     (face-foreground 'default nil 'default))
  ;;          (headline           `(:inherit default :weight bold )))

  ;;     (custom-theme-set-faces
  ;;      'user
  ;;      `(org-level-8 ((t (,@headline ,@variable-tuple))))
  ;;      `(org-level-7 ((t (,@headline ,@variable-tuple))))
  ;;      `(org-level-6 ((t (,@headline ,@variable-tuple))))
  ;;      `(org-level-5 ((t (,@headline ,@variable-tuple))))
  ;;      `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
  ;;      `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
  ;;      `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
  ;;      `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
  ;;      `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil))))))
  ;; (custom-theme-set-faces
  ;;  'user
  ;;  '(variable-pitch ((t (:family "Segoe UI Semibold-9" :height 180 :weight light))))
  ;;  '(fixed-pitch ((t ( :family "Inconsolata" :slant normal :weight normal :height 1.0 :width normal)))))
  ;;     ;; (add-hook 'org-mode-hook
  ;;     ;;             '(lambda ()
  ;;     ;;                (variable-pitch-mode 1)
  ;;     ;;                (mapc
  ;;     ;;                 (lambda (face)
  ;;     ;;                   (set-face-attribute face nil :inherit 'fixed-pitch))
  ;;     ;;                 (list 'org-code
  ;;     ;;                       'org-link 
  ;;     ;;                       'org-block
  ;;     ;;                       'org-table
  ;;     ;;                       'org-block-begin-line
  ;;     ;;                       'org-block-end-line
  ;;     ;;                       'org-meta-line
  ;;     ;;                       'org-document-info-keyword))))
  ;;       ;; (add-hook 'text-mode-hook
  ;;       ;;             (lambda ()
  ;;       ;;               (variable-pitch-mode 1)))
  ;; (add-hook 'org-mode-hook 'variable-pitch-mode)
          ;;(set-face-attribute 'variable-pitch nil :family "Baskerville")
        ;; (set-face-attribute 'default nil :family "Iosevka" :height 130)
        ;; (set-face-attribute 'fixed-pitch nil :family "Iosevka")
        ;; (set-face-attribute 'variable-pitch nil :family "Baskerville")
        ;; ;; (olivetti-mode 1)        ;; Centers text in the buffer
        ;; (flyspell-mode 1)        ;; Catch Spelling mistakes
        ;; (typo-mode 1)            ;; Good for symbols like em-dash

        ;; (blink-cursor-mode 0)    ;; Reduce visual noise
        ;; (linum-mode 0)           ;; No line numbers for pros

        ;; (require 'org-bullets)
        ;; (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

        ;;   (setq org-bullets-bullet-list
        ;;       '("◉" "○"))
        ;;   (org-bullets 1)
#+end_src

#+RESULTS:
| variable-pitch-mode | (lambda nil (variable-pitch-mode 1) (mapc (lambda (face) (set-face-attribute face nil :inherit (quote fixed-pitch))) (list (quote org-code) (quote org-link) (quote org-block) (quote org-table) (quote org-block-begin-line) (quote org-block-end-line) (quote org-meta-line) (quote org-document-info-keyword)))) | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | org-ref-org-menu | ob-ipython-auto-configure-kernels | (lambda nil (progn (parenthesis-register-keys [($~ org-mode-map))) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-eldoc-load |

** Window defaults
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode 0)    ; Turn off scrollbars.
(tool-bar-mode 0)      ; Turn off toolbars.
(fringe-mode 0)        ; Turn off left and right fringe cols.
(menu-bar-mode -1)      ; Turn off menus.


(add-hook 'window-configuration-change-hook
	  (lambda ()
	    (set-window-margins (car (get-buffer-window-list (current-buffer) nil t)) 2 2 )))
#+END_SRC
[2019-02-22 Fri]

[[https://emacs-doctor.com/emacs-strip-tease.html][Naked emacs!]]

#+begin_src emacs-lisp
(defvar-local hidden-mode-line-mode nil)
(defvar-local hide-mode-line nil)

(define-minor-mode hidden-mode-line-mode
  "Minor mode to hide the mode-line in the current buffer."
  :init-value nil
  :global nil
  :variable hidden-mode-line-mode
  :group 'editing-basics
  (if hidden-mode-line-mode
      (setq hide-mode-line mode-line-format
            mode-line-format nil)
    (setq mode-line-format hide-mode-line
          hide-mode-line nil))
  (force-mode-line-update)
  ;; Apparently force-mode-line-update is not always enough to
  ;; redisplay the mode-line
  (redraw-display)
  (when (and (called-interactively-p 'interactive)
             hidden-mode-line-mode)
    (run-with-idle-timer
     0 nil 'message
     (concat "Hidden Mode Line Mode enabled.  "
             "Use M-x hidden-mode-line-mode to make the mode-line appear."))))

;; Activate hidden-mode-line-mode
;;(add-hook 'after-change-major-mode-hook 'hidden-mode-line-mode)

 (defvar-local header-line-format nil)
 (defun mode-line-in-header ()
   (interactive)
   (if (not header-line-format)
       (setq header-line-format mode-line-format
             mode-line-format nil)
     (setq mode-line-format header-line-format
           header-line-format nil))
   (set-window-buffer nil (current-buffer)))
;; (hidden-mode-line-mode 1)
#+end_src

#+RESULTS:
: t

** Window Transparency
#+BEGIN_SRC emacs-lisp
  ;; set transparency
  ;; (set-frame-parameter (selected-frame) 'alpha '(100 100))
  ;; (add-to-list 'default-frame-alist '(alpha 100 100))
#+END_SRC
** Color Aesthetics
#+BEGIN_SRC emacs-lisp
;; Disabled on <2018-02-28 Wed>
  ;; (set-face-background 'mode-line "#332F59")
  ;; (set-face-background 'mode-line-inactive "#8E2F59")
  ;; (set-face-background 'fringe "#343434")
#+END_SRC
** Truncate lines
#+BEGIN_SRC emacs-lisp
  (setq-default truncate-lines t)
#+END_SRC
** Display time
#+BEGIN_SRC emacs-lisp
(setq display-time-day-and-date t
 display-time-24hr-format t)
(display-time)
#+END_SRC
(setq ae-keywords:tex-mode:list 
      (list  '( comment "^\\s *\\(%.+$\\)" 'hi-pink)
      ))
(dolist (elt ae-keywords:tex-mode:list)
  (font-lock-add-keywords nil (list (list (nth 1 elt) 1 (nth 2 elt) 'append)))
  )
** Make indirect buffer 
#+BEGIN_SRC emacs-lisp
(defun narrow-to-region-indirect (start end)
  "Restrict editing in this buffer to the current region, indirectly."
  (interactive "r")
  (deactivate-mark)
  (let ((buf (clone-indirect-buffer nil nil)))
    (with-current-buffer buf
      (narrow-to-region start end))
      (switch-to-buffer buf)))
#+END_SRC
** Miscellaneous Keybindings
#+BEGIN_SRC emacs-lisp
(setq toggle-frame-fullscreen t)
(global-set-key (kbd "C-x o") 'other-window)
;;(global-set-key (kbd "C-c l") 
;;                (lambda () (interactive) (find-file "~/orgs/research/LabNoteBook.org")))
;; Other org mode mappings
(global-set-key (kbd "C-c l") 'org-store-link)
;;(define-key global-map "\C-c l" 'org-store-link)
(setq org-log-done t)

(setq org-todo-keywords
  '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))
#+END_SRC
** Downloaded themes
#+BEGIN_SRC elisp
  ;; (add-to-list 'custom-theme-load-path
  ;;              (file-name-as-directory "./replace-colorthemes/"))
  ;; (load-theme 'retro-orange-theme t)
  ;; (enable-theme 'retro-orange-theme)
#+END_SRC
** Backup directory
<2018-01-04 Thu>
Copied from [[http://ergoemacs.org/emacs/emacs_set_backup_into_a_directory.html][here]]
#+BEGIN_SRC emacs-lisp
;; make backup to a designated dir, mirroring the full path

(defun my-backup-file-name (fpath)
  "Return a new file path of a given file path.
If the new path's directories does not exist, create them."
  (let* (
        (backupRootDir "~/orgs/.emacs-backup/")
        (filePath (replace-regexp-in-string "[A-Za-z]:" "" fpath )) ; remove Windows driver letter in path, for example, "C:"
        (backupFilePath (replace-regexp-in-string "//" "/" (concat backupRootDir filePath "~") ))
        )
    (make-directory (file-name-directory backupFilePath) (file-name-directory backupFilePath))
    backupFilePath
  )
)

(setq make-backup-file-name-function 'my-backup-file-name)

#+END_SRC
** Dired
[2018-12-14 Fri]
Load dired x
(Keybindings are from https://www.reddit.com/r/emacs/comments/4agkye/how_do_you_customize_dired/)
#+BEGIN_SRC emacs-lisp
    (autoload 'dired-jump "dired-x"
      "Jump to Dired buffer corresponding to current buffer." t)

    (autoload 'dired-jump-other-window "dired-x"
      "Like \\[dired-jump] (dired-jump) but in other window." t)

    (define-key global-map "\C-x\C-j" 'dired-jump)
    (define-key global-map "\C-x4\C-j" 'dired-jump-other-window)


    (add-hook 'dired-load-hook
              (lambda ()
                (load "dired-x")
                ;; Set dired-x global variables here.  For example:
                ;; (setq dired-guess-shell-gnutar "gtar")
                ;; (setq dired-x-hands-off-my-keys nil)
                ))

  (with-eval-after-load 'dired
    (require 'dired-x)
    (setq-default dired-omit-files-p t)
    ;;(setq dired-listing-switches "-alhv")
    ;; (setq dired-omit-files "^\\.\\|^#.#$\\|.~$")
    (setq dired-omit-files "^\\.\\|^#.#$\\|.~$")
    ;;(define-key dired-mode-map (kbd "/") #'dired-narrow-fuzzy)
    (define-key dired-mode-map (kbd "h") #'dired-omit-mode)
    ;;(define-key dired-mode-map (kbd "e") #'read-only-mode)
    )

#+END_SRC

#+RESULTS:
: dired-omit-mode

| lambda | nil | (dired-hide-details-mode) |
#+BEGIN_EXAMPLE
^\.?#\|^\.$\|^\.\.$
#+END_EXAMPLE
** Theme Changer
   <2018-01-07 Sun>
#+BEGIN_SRC emacs-lisp
  ;; (setq calendar-location-name "Blacksburg, VA") 
  ;; (setq calendar-latitude 37.2296)
  ;; (setq calendar-longitude 80.4139)
  ;; (require 'theme-changer)
  ;; (change-theme 'gruvbox-light-hard 'gruvbox)
#+END_SRC
** Show battery in modeline
<2018-02-14 Wed>
#+BEGIN_SRC emacs-lisp
(display-battery-mode 1) 
#+END_SRC
** Helm
*** Load helm
 <2018-02-25 Sun>
 #+BEGIN_SRC emacs-lisp
   (require 'helm)

(require 'helm-config)
   (global-set-key (kbd "M-x") 'helm-M-x)

   ;; ;; (global-set-key (kbd "C-x C-f") 'helm-find-files)
   (helm-mode 1)
 #+END_SRC
*** Jeff's fix for the annoying TAB completion problem
#+BEGIN_SRC emacs-lisp
  ;; modify help so tab is autocomplete
  ;; (define-key helm-map (kbd "TAB") #'helm-execute-persistent-action)
  ;; (define-key helm-map (kbd "<tab>") #'helm-execute-persistent-action)
  ;; (define-key helm-map (kbd "C-z") #'helm-select-action)
#+END_SRC
*** Helm-swoop configurations
<2018-02-25 Sun>
#+BEGIN_SRC emacs-lisp
(require 'helm-swoop)
(global-set-key (kbd "M-i") 'helm-swoop)
(define-key helm-swoop-map (kbd "C-r") 'helm-previous-line)
(define-key helm-swoop-map (kbd "C-s") 'helm-next-line)
#+END_SRC
*** Reconfiguring helm-bibtex
#+BEGIN_SRC emacs-lisp

(autoload 'helm-bibtex "helm-bibtex" "" t)
#+END_SRC
** Abbrev
<2018-02-25 Sun>
#+BEGIN_SRC emacs-lisp
  ;; (load "~/.emacs.d/lisp/aj-abbrev.el")   
#+END_SRC
** Visual Regexp
<2018-02-25 Sun>
#+BEGIN_SRC emacs-lisp
(require 'visual-regexp)
(define-key global-map (kbd "C-c r") 'vr/replace)
(define-key global-map (kbd "C-c q") 'vr/query-replace)
#+END_SRC
** YASnippet
<2018-04-05 Thu>
#+BEGIN_SRC emacs-lisp
(require 'yasnippet)
(setq yas-snippet-dirs
      '("~/.emacs.d/snippets"                 ;; personal snippets
        ))
(yas-global-mode 1)
#+END_SRC

#+RESULTS:
: t

** Annoying C-z
<2018-04-27 Fri>
Found it [[https://superuser.com/a/349997][on stackexhange]]
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-z"))
#+END_SRC
** Fonts
[2019-02-20 Wed]
#+begin_src emacs-lisp
  ;; From https://github.com/andirueckel/undefined-medium
  ;;(set-face-attribute 'default nil :font "Undefined"  )
  ;; Default
  (set-face-attribute 'default nil :font "Iosevka"  )
#+end_src

#+RESULTS:

#+BEGIN_SRC emacs-lisp
  ;; (when (window-system)
  ;;   (set-frame-font "Fira Code"))
  ;; (let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
  ;;                (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
  ;;                (36 . ".\\(?:>\\)")
  ;;                (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
  ;;                (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
  ;;                (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
  ;;                (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
  ;;                (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
  ;;                (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
  ;;                (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
  ;;                (48 . ".\\(?:x[a-zA-Z]\\)")
  ;;                (58 . ".\\(?:::\\|[:=]\\)")
  ;;                (59 . ".\\(?:;;\\|;\\)")
  ;;                (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
  ;;                (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
  ;;                (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
  ;;                (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
  ;;                (91 . ".\\(?:]\\)")
  ;;                (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
  ;;                (94 . ".\\(?:=\\)")
  ;;                (119 . ".\\(?:ww\\)")
  ;;                (123 . ".\\(?:-\\)")
  ;;                (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
  ;;                (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
  ;;                )
  ;;              ))
  ;;   (dolist (char-regexp alist)
  ;;     (set-char-table-range composition-function-table (car char-regexp)
  ;;                           `([,(cdr char-regexp) 0 font-shape-gstring]))))



  ;; ;;; Fira code
  ;; ;; This works when using emacs --daemon + emacsclient
  ;; (add-hook 'after-make-frame-functions (lambda (frame) (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")))
  ;; ;; This works when using emacs without server/client
  ;; (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")
  ;; ;; I haven't found one statement that makes both of the above situations work, so I use both for now

  ;; (defconst fira-code-font-lock-keywords-alist
  ;;   (mapcar (lambda (regex-char-pair)
  ;;             `(,(car regex-char-pair)
  ;;               (0 (prog1 ()
  ;;                    (compose-region (match-beginning 1)
  ;;                                    (match-end 1)
  ;;                                    ;; The first argument to concat is a string containing a literal tab
  ;;                                    ,(concat "	" (list (decode-char 'ucs (cadr regex-char-pair)))))))))
  ;;           '(("\\(www\\)"                   #Xe100)
  ;;             ("[^/]\\(\\*\\*\\)[^/]"        #Xe101)
  ;;             ("\\(\\*\\*\\*\\)"             #Xe102)
  ;;             ("\\(\\*\\*/\\)"               #Xe103)
  ;;             ("\\(\\*>\\)"                  #Xe104)
  ;;             ("[^*]\\(\\*/\\)"              #Xe105)
  ;;             ("\\(\\\\\\\\\\)"              #Xe106)
  ;;             ("\\(\\\\\\\\\\\\\\)"          #Xe107)
  ;;             ("\\({-\\)"                    #Xe108)
  ;;             ("\\(\\[\\]\\)"                #Xe109)
  ;;             ("\\(::\\)"                    #Xe10a)
  ;;             ("\\(:::\\)"                   #Xe10b)
  ;;             ("[^=]\\(:=\\)"                #Xe10c)
  ;;             ("\\(!!\\)"                    #Xe10d)
  ;;             ("\\(!=\\)"                    #Xe10e)
  ;;             ("\\(!==\\)"                   #Xe10f)
  ;;             ("\\(-}\\)"                    #Xe110)
  ;;             ("\\(--\\)"                    #Xe111)
  ;;             ("\\(---\\)"                   #Xe112)
  ;;             ("\\(-->\\)"                   #Xe113)
  ;;             ("[^-]\\(->\\)"                #Xe114)
  ;;             ("\\(->>\\)"                   #Xe115)
  ;;             ("\\(-<\\)"                    #Xe116)
  ;;             ("\\(-<<\\)"                   #Xe117)
  ;;             ("\\(-~\\)"                    #Xe118)
  ;;             ("\\(#{\\)"                    #Xe119)
  ;;             ("\\(#\\[\\)"                  #Xe11a)
  ;;             ("\\(##\\)"                    #Xe11b)
  ;;             ("\\(###\\)"                   #Xe11c)
  ;;             ("\\(####\\)"                  #Xe11d)
  ;;             ("\\(#(\\)"                    #Xe11e)
  ;;             ("\\(#\\?\\)"                  #Xe11f)
  ;;             ("\\(#_\\)"                    #Xe120)
  ;;             ("\\(#_(\\)"                   #Xe121)
  ;;             ("\\(\\.-\\)"                  #Xe122)
  ;;             ("\\(\\.=\\)"                  #Xe123)
  ;;             ("\\(\\.\\.\\)"                #Xe124)
  ;;             ("\\(\\.\\.<\\)"               #Xe125)
  ;;             ("\\(\\.\\.\\.\\)"             #Xe126)
  ;;             ("\\(\\?=\\)"                  #Xe127)
  ;;             ("\\(\\?\\?\\)"                #Xe128)
  ;;             ("\\(;;\\)"                    #Xe129)
  ;;             ("\\(/\\*\\)"                  #Xe12a)
  ;;             ("\\(/\\*\\*\\)"               #Xe12b)
  ;;             ("\\(/=\\)"                    #Xe12c)
  ;;             ("\\(/==\\)"                   #Xe12d)
  ;;             ("\\(/>\\)"                    #Xe12e)
  ;;             ("\\(//\\)"                    #Xe12f)
  ;;             ("\\(///\\)"                   #Xe130)
  ;;             ("\\(&&\\)"                    #Xe131)
  ;;             ("\\(||\\)"                    #Xe132)
  ;;             ("\\(||=\\)"                   #Xe133)
  ;;             ("[^|]\\(|=\\)"                #Xe134)
  ;;             ("\\(|>\\)"                    #Xe135)
  ;;             ("\\(\\^=\\)"                  #Xe136)
  ;;             ("\\(\\$>\\)"                  #Xe137)
  ;;             ("\\(\\+\\+\\)"                #Xe138)
  ;;             ("\\(\\+\\+\\+\\)"             #Xe139)
  ;;             ("\\(\\+>\\)"                  #Xe13a)
  ;;             ("\\(=:=\\)"                   #Xe13b)
  ;;             ("[^!/]\\(==\\)[^>]"           #Xe13c)
  ;;             ("\\(===\\)"                   #Xe13d)
  ;;             ("\\(==>\\)"                   #Xe13e)
  ;;             ("[^=]\\(=>\\)"                #Xe13f)
  ;;             ("\\(=>>\\)"                   #Xe140)
  ;;             ("\\(<=\\)"                    #Xe141)
  ;;             ("\\(=<<\\)"                   #Xe142)
  ;;             ("\\(=/=\\)"                   #Xe143)
  ;;             ("\\(>-\\)"                    #Xe144)
  ;;             ("\\(>=\\)"                    #Xe145)
  ;;             ("\\(>=>\\)"                   #Xe146)
  ;;             ("[^-=]\\(>>\\)"               #Xe147)
  ;;             ("\\(>>-\\)"                   #Xe148)
  ;;             ("\\(>>=\\)"                   #Xe149)
  ;;             ("\\(>>>\\)"                   #Xe14a)
  ;;             ("\\(<\\*\\)"                  #Xe14b)
  ;;             ("\\(<\\*>\\)"                 #Xe14c)
  ;;             ("\\(<|\\)"                    #Xe14d)
  ;;             ("\\(<|>\\)"                   #Xe14e)
  ;;             ("\\(<\\$\\)"                  #Xe14f)
  ;;             ("\\(<\\$>\\)"                 #Xe150)
  ;;             ("\\(<!--\\)"                  #Xe151)
  ;;             ("\\(<-\\)"                    #Xe152)
  ;;             ("\\(<--\\)"                   #Xe153)
  ;;             ("\\(<->\\)"                   #Xe154)
  ;;             ("\\(<\\+\\)"                  #Xe155)
  ;;             ("\\(<\\+>\\)"                 #Xe156)
  ;;             ("\\(<=\\)"                    #Xe157)
  ;;             ("\\(<==\\)"                   #Xe158)
  ;;             ("\\(<=>\\)"                   #Xe159)
  ;;             ("\\(<=<\\)"                   #Xe15a)
  ;;             ("\\(<>\\)"                    #Xe15b)
  ;;             ("[^-=]\\(<<\\)"               #Xe15c)
  ;;             ("\\(<<-\\)"                   #Xe15d)
  ;;             ("\\(<<=\\)"                   #Xe15e)
  ;;             ("\\(<<<\\)"                   #Xe15f)
  ;;             ("\\(<~\\)"                    #Xe160)
  ;;             ("\\(<~~\\)"                   #Xe161)
  ;;             ("\\(</\\)"                    #Xe162)
  ;;             ("\\(</>\\)"                   #Xe163)
  ;;             ("\\(~@\\)"                    #Xe164)
  ;;             ("\\(~-\\)"                    #Xe165)
  ;;             ("\\(~=\\)"                    #Xe166)
  ;;             ("\\(~>\\)"                    #Xe167)
  ;;             ("[^<]\\(~~\\)"                #Xe168)
  ;;             ("\\(~~>\\)"                   #Xe169)
  ;;             ("\\(%%\\)"                    #Xe16a)
  ;;             ;;("\\(x\\)"                     #Xe16b)
  ;;             ("[^:=]\\(:\\)[^:=]"           #Xe16c)
  ;;             ("[^\\+<>]\\(\\+\\)[^\\+<>]"   #Xe16d)
  ;;             ("[^\\*/<>]\\(\\*\\)[^\\*/<>]" #Xe16f))))

  ;; (defun add-fira-code-symbol-keywords ()
  ;;   (font-lock-add-keywords nil fira-code-font-lock-keywords-alist))

  ;; (add-hook 'prog-mode-hook
  ;;           #'add-fira-code-symbol-keywords)

  ;; (set-face-font 'default "-CYEL-Iosevka-normal-normal-normal-*-16-*-*-*-d-0-iso10646-1")
  ;; (load "~/.emacs.d/lisp/symbols.el")
#+END_SRC
** Rectangular select regep operations
   <2018-05-10 Thu>
Copied from [[https://stackoverflow.com/questions/11130546/search-and-replace-inside-a-rectangle-in-emacs][this Stackoverflow answer]]
#+BEGIN_SRC emacs-lisp
(require 'rect)

(defun my-search-replace-in-rectangle
  (start end search-pattern replacement search-function literal)
  "Replace all instances of SEARCH-PATTERN (as found by SEARCH-FUNCTION)
with REPLACEMENT, in each line of the rectangle established by the START
and END buffer positions.

SEARCH-FUNCTION should take the same BOUND and NOERROR arguments as
`search-forward' and `re-search-forward'.

The LITERAL argument is passed to `replace-match' during replacement.

If `case-replace' is nil, do not alter case of replacement text."
  (apply-on-rectangle
   (lambda (start-col end-col search-function search-pattern replacement)
     (move-to-column start-col)
     (let ((bound (min (+ (point) (- end-col start-col))
                       (line-end-position)))
           (fixedcase (not case-replace)))
       (while (funcall search-function search-pattern bound t)
         (replace-match replacement fixedcase literal))))
   start end search-function search-pattern replacement))

(defun my-replace-regexp-rectangle-read-args (regexp-flag)
  "Interactively read arguments for `my-replace-regexp-rectangle'
or `my-replace-string-rectangle' (depending upon REGEXP-FLAG)."
  (let ((args (query-replace-read-args
               (concat "Replace"
                       (if current-prefix-arg " word" "")
                       (if regexp-flag " regexp" " string"))
               regexp-flag)))
    (list (region-beginning) (region-end)
          (nth 0 args) (nth 1 args) (nth 2 args))))

(defun my-replace-regexp-rectangle
  (start end regexp to-string &optional delimited)
  "Perform a regexp search and replace on each line of a rectangle
established by START and END (interactively, the marked region),
similar to `replace-regexp'.

Optional arg DELIMITED (prefix arg if interactive), if non-nil, means
replace only matches surrounded by word boundaries.

If `case-replace' is nil, do not alter case of replacement text."
  (interactive (my-replace-regexp-rectangle-read-args t))
  (when delimited
    (setq regexp (concat "\\b" regexp "\\b")))
  (my-search-replace-in-rectangle
   start end regexp to-string 're-search-forward nil))

(defun my-replace-string-rectangle
  (start end from-string to-string &optional delimited)
  "Perform a string search and replace on each line of a rectangle
established by START and END (interactively, the marked region),
similar to `replace-string'.

Optional arg DELIMITED (prefix arg if interactive), if non-nil, means
replace only matches surrounded by word boundaries.

If `case-replace' is nil, do not alter case of replacement text."
  (interactive (my-replace-regexp-rectangle-read-args nil))
  (let ((search-function 'search-forward))
    (when delimited
      (setq search-function 're-search-forward
            from-string (concat "\\b" (regexp-quote from-string) "\\b")))
    (my-search-replace-in-rectangle
     start end from-string to-string search-function t)))

(global-set-key (kbd "C-x r M-%") 'my-replace-string-rectangle)
(global-set-key (kbd "C-x r C-M-%") 'my-replace-regexp-rectangle)
#+END_SRC
** Auto fill mode
<2018-06-08 Fri>
Set autofill mode by default for all major modes
#+BEGIN_SRC emacs-lisp
;; This becomes annoying in shell and org buffers
;;(setq-default auto-fill-function 'do-autoill)
#+END_SRC
** Auto reload files
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC
** Auto reload files
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC
** My macros
#+BEGIN_SRC emacs-lisp
(fset 'mydb
   [?\C-x ?1 ?\C-x ?3 ?\C-x ?\C-f ?~ ?/ ?. ?e ?m tab ?. tab ?s ?t ?a ?r tab ?. ?o tab return ?\C-c ?a ?  ?\C-x ?- ?\C-x ?\C-- ?\C-x ?o ?\C-x ?2 ?\C-x ?\C-b])
(global-set-key (kbd "C-c d") 'mydb)
#+END_SRC
** Dired listing chronological instead of alphabetical
#+BEGIN_SRC emacs-lisp
(setq dired-listing-switches "-lt")

#+END_SRC

#+RESULTS:
: -lt
** Clean up modeline
<2018-11-21 Wed>
#+BEGIN_SRC emacs-lisp
(diminish 'company-mode)
(diminish 'yas-minor-mode)
(diminish 'eldoc-mode)
(diminish 'helm-mode)
(diminish 'org-mode)
(diminish 'org-agenda-mode)
(diminish 'projectile-mode)
#+END_SRC

#+RESULTS:
|   |
** Olivetti mode - turn on C-c ] binding
<2018-11-24 Sat>
#+BEGIN_SRC elisp
(eval-after-load "olivetti-mode"
  '(define-key olivetti-mode-map (kbd "C-c ]") nil))
#+END_SRC

#+RESULTS:
** Get Shell-Command to recognize bash aliases
#+BEGIN_SRC elisp
(setq shell-file-name "bash")
(setq shell-command-switch "-ic")
#+END_SRC

#+RESULTS:
: -ic

** Ace links
[2018-12-14 Fri]
#+BEGIN_SRC elisp
(ace-link-setup-default)
(define-key org-mode-map (kbd "M-o") 'ace-link-org)
;;(define-key help-mode-map (kbd "M-o") 'ace-link-help)
#+END_SRC

#+RESULTS:
: ace-link-org

** Parenthesis and autocomplete
[2018-12-21 Fri]
#+BEGIN_SRC emacs-lisp
  ;; (load-file "~/.emacs.d/parenthesis.el")
  ;; (require 'parenthesis)
  ;; (parenthesis-init)  
  ;; (add-hook 'org-mode-hook '(lambda ()
  ;;                            (progn
  ;;                            ; other stuff
  ;;                            (parenthesis-register-keys "[($~" org-mode-map))))
  ;; (add-hook 'python-mode-hook '(lambda ()
  ;;                            (progn
  ;;                            ; other stuff
  ;;                            (parenthesis-register-keys "[({\'\"" python-mode-map))))
#+END_SRC

[2019-01-25 Fri]
Update: This is proving to be very annoying
#+RESULTS:
| lambda | nil | (progn (parenthesis-register-keys [('"{ python-mode-map)) |
| lambda | nil | (progn (parenthesis-register-keys [({" python-mode-map))  |
| lambda | nil | (progn (parenthesis-register-keys [({'" python-mode-map)) |
| lambda | nil | (progn (parenthesis-register-keys [({' python-mode-map))  |
| lambda | nil | (progn (parenthesis-register-keys [({ python-mode-map))   |

** Open with external programs
[2019-01-14 Mon]
#+begin_src emacs-lisp
  ;; (require 'openwith)
  ;; (openwith-mode t)
  ;; (setq openwith-associations '(("\\.pdf\\'" "evince" (file))))
#+end_src

#+RESULTS:
| \.pdf\' | evince | (file) |

** Visible Bell
#+BEGIN_SRC emacs-lisp
(setq visible-bell 1)
#+END_SRC

** Customizing modeline
#+begin_src emacs-lisp
  ;; (setq aj-sec (with-temp-buffer
  ;;              (insert-file-contents "~/orgs/secrets")
  ;;              ;;(buffer-string))
  ;;             (replace-regexp-in-string "[ \t \n]*" "" (buffer-string))))

  ;; (setq mode-line-format
  ;;       (append
  ;;        mode-line-format
  ;;        '(" <<" 'aj-sec ">> " )))

#+end_src

#+RESULTS:
| %e | mode-line-front-space | mode-line-mule-info | mode-line-client | mode-line-modified | mode-line-remote | mode-line-frame-identification | mode-line-buffer-identification |   | mode-line-position | (vc-mode vc-mode) |   | mode-line-modes | mode-line-misc-info | mode-line-end-spaces | << | (quote aj-sec) | >> | << | (quote aj-sec) | >> |

* All the icons
[2019-03-14 Thu]
#+begin_src emacs-lisp
  (require 'all-the-icons)
#+end_src

#+RESULTS:
: all-the-icons

* Company
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'global-company-mode)

  (with-eval-after-load 'company 
    (add-to-list 'company-backends 'company-jedi 'company-math-symbols-latex))
  ;; (add-to-list 'company-backends 'company-ob-ipython) ;

#+END_SRC

#+RESULTS:
| company-bbdb | company-eclim | company-semantic | company-clang | company-xcode | company-cmake | company-capf | company-files | (company-dabbrev-code company-gtags company-etags company-keywords) | company-oddmuse | company-dabbrev | company-jedi |

[2019-03-14 Thu]
#+begin_src emacs-lisp
  (eval-after-load 'company
    '(progn
       (define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle)
       ))

  ;;(company-quickhelp-mode)
(require 'company-box)
(add-hook 'company-mode-hook 'company-box-mode)
#+end_src

#+RESULTS:
| company-box-mode | company-mode-set-explicitly |

* Python
** Setting to use shell arguments?
#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Python setup to use the shell python variable for emacs, so uses conda
(defun set-exec-path-from-shell-PATH ()
  (interactive)
  (let ((path-from-shell (replace-regexp-in-string "^.*\n.*shell\n" "" (shell-command-to-string "$SHELL --login -i -\
c 'echo $PATH'"))))
  (setenv "PATH" path-from-shell)                                                                                    
(setq exec-path (split-string path-from-shell path-separator))))
(set-exec-path-from-shell-PATH)  
#+END_SRC

** Elpy 
<2018-03-17 Sat>
#+BEGIN_SRC emacs-lisp
  ;; (elpy-enable)
  (setq-default indent-tabs-mode nil)
#+END_SRC
** Jedi
#+begin_src emacs-lisp
(add-hook 'python-mode-hook 'jedi:setup)
#+end_src

#+RESULTS:
| jedi:setup | my/python-mode-hook |

** Company jedi
[2019-03-14 Thu]
#+begin_src emacs-lisp
  ;; (defun my/python-mode-hook ()
  ;; )

  ;;   (add-hook 'python-mode-hook 'my/python-mode-hook)
#+end_src

#+RESULTS:
| my/python-mode-hook |

** OB-Ipython
*** Basic setup
 <2018-04-05 Thu>
 #+BEGIN_SRC emacs-lisp
   (require 'ob-ipython)

   (setq org-confirm-babel-evaluate nil)   ;don't prompt me to confirm everytime I want to evaluate a block
   ;; ;;; display/update images in the buffer after I evaluate
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)

 #+END_SRC
*** Inline figures
<2018-04-06 Fri>
From [[http://kitchingroup.cheme.cmu.edu/blog/2017/01/29/ob-ipython-and-inline-figures-in-org-mode/][John Kitchin's blog]]
#+BEGIN_SRC emacs-lisp
  ;; (defun ob-ipython-inline-image (b64-string)
  ;;   "Write the b64-string to a temporary file.
  ;; Returns an org-link to the file."
  ;;   (let* ((tfile (make-temp-file "ob-ipython-" nil ".png"))
  ;;          (link (format "[[file:%s]]" tfile)))
  ;;     (ob-ipython--write-base64-string tfile b64-string)
  ;;     link))


  ;; (defun org-babel-execute:ipython (body params)
  ;;   "Execute a block of IPython code with Babel.
  ;; This function is called by `org-babel-execute-src-block'."
  ;;   (let* ((file (cdr (assoc :file params)))
  ;;          (session (cdr (assoc :session params)))
  ;;          (result-type (cdr (assoc :result-type params))))
  ;;     (org-babel-ipython-initiate-session session params)
  ;;     (-when-let (ret (ob-ipython--eval
  ;;                      (ob-ipython--execute-request
  ;;                       (org-babel-expand-body:generic (encode-coding-string body 'utf-8)
  ;;                                                      params (org-babel-variable-assignments:python params))
  ;;                       (ob-ipython--normalize-session session))))
  ;;       (let ((result (cdr (assoc :result ret)))
  ;;             (output (cdr (assoc :output ret))))
  ;;         (if (eq result-type 'output)
  ;;             (concat
  ;;              output 
  ;;              (format "%s"
  ;;                      (mapconcat 'identity
  ;;                                 (loop for res in result
  ;;                                       if (eq 'image/png (car res))
  ;;                                       collect (ob-ipython-inline-image (cdr res)))
  ;;                                 "\n")))
  ;;           (ob-ipython--create-stdout-buffer output)
  ;;           (cond ((and file (string= (f-ext file) "png"))
  ;;                  (->> result (assoc 'image/png) cdr (ob-ipython--write-base64-string file)))
  ;;                 ((and file (string= (f-ext file) "svg"))
  ;;                  (->> result (assoc 'image/svg+xml) cdr (ob-ipython--write-string-to-file file)))
  ;;                 (file (error "%s is currently an unsupported file extension." (f-ext file)))
  ;;                 (t (->> result (assoc 'text/plain) cdr))))))))

#+END_SRC
*** Ensure error messages are opened in new window
<2018-04-09 Mon>
From [[https://emacs.stackexchange.com/questions/2194/how-do-i-force-a-specific-buffer-to-open-in-a-new-window][here]]
#+BEGIN_SRC emacs-lisp
  (add-to-list 'display-buffer-alist
                   '("ob-ipython-traceback". ((display-buffer-pop-up-window) .
                                          ((inhibit-same-window . t)))))
#+END_SRC
* Projectile
  [2019-03-14 Thu]
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (projectile-mode +1))

  (setq projectile-project-search-path
        '("~/jalihal_projects/Research/data/ModelAnalysis/"
          "~/group/amogh-jalihal/"
          "~/group/amogh-jalihal/proposals/2019-Prelims/"
          "~/orgs/"))
  (setq projectile-indexing-method 'native) ;; otherwise it doesn't respect .projectile
#+end_src

#+RESULTS:
: native
* Nswbuff
[2019-03-14 Thu 04:30]
#+begin_src emacs-lisp
      (use-package nswbuff
        :ensure t
        ;; :config
        ;; (nswbuff-mode +1)
  )
      (define-key global-map (kbd "<C-tab>") 'nswbuff-switch-to-next-buffer)
      (define-key global-map (kbd "<C-S-iso-lefttab>") 'nswbuff-switch-to-previous-buffer)
    (setq nswbuff-buffer-list-function 'nswbuff-projectile-buffer-list)
    (setq nswbuff-display-intermediate-buffers t)
    (setq nswbuff-exclude-buffer-regexps '("^ .*" "^\\*.*\\*"))

#+end_src

#+RESULTS:
| ^ .* | ^\*.*\* |

* Julia
** Emacs Speaks Statistics
<2018-04-09 Mon>
I installed emacs-ess on Fedora using sudo dnf install emacs-ess
#+BEGIN_SRC emacs-lisp
  ;; (require 'ess-site)
#+END_SRC
** Ob-julia
#+BEGIN_SRC emacs-lisp
(setq  inferior-julia-program-name "/usr/bin/julia")
(load "~/.emacs.d/elpa/ob-julia/ob-julia.el")
#+END_SRC
* Org-mode
** Enable org-mode
#+BEGIN_SRC emacs-lisp
;;;;org-mode configuration
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(require 'org)
(define-key global-map "\C-ca" 'org-agenda)
#+END_SRC
** Setting timestamp when TODO state changes to DONE
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
#+END_SRC   
** Open PDFs in evince
#+BEGIN_SRC emacs-lisp
  ;; PDFs visited in Org-mode are opened in Evince (and not in the default choice) http://stackoverflow.com/a/8836108/789593
  ;; (add-hook 'org-mode-hook
  ;;       '(lambda ()
  ;;          (delete '("\\.pdf\\'" . default) org-file-apps)
  ;;          (add-to-list 'org-file-apps '("\\.pdf\\'" . "evince %s"))))
#+END_SRC
** Org-PDF-Tools
As on <2018-01-02 Tue> I have disabled pdf-tools and have deleted the package because it is causing problems in simmons
#+BEGIN_SRC emacs-lisp
  ;; ;; pdf-tools-org
  ;; (add-to-list 'load-path "~/.emacs.d/pdf-tools-org")
  ;; (require 'pdf-tools-org)
#+end_SRC
** Org-Babel setup

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
`org-babel-load-languages
 `((dot . t)
 (shell . t)
 (python . t)
 (ditaa . t)
 (latex . t)
;; (ipython . t)
 (R . t)
(julia . t)
(screen . t)
))
#+END_SRC

#+RESULTS:

** Export
*** Org-beamer
#+BEGIN_SRC emacs-lisp
  ;; (require 'ox-latex)
  ;; (add-to-list 'org-latex-classes
  ;;              '("beamer"
  ;;                "\\documentclass\[presentation\]\{beamer\}"
  ;;                ("\\section\{%s\}" . "\\section*\{%s\}")
  ;;                ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
  ;;                ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}")))
#+END_SRC
*** Org-Rss
[2018-12-17 Mon]
This is such a cool idea!!
#+BEGIN_SRC emacs-lisp
(require 'ox-rss)
(add-to-list 'org-publish-project-alist
             '("blog-rss"
		:base-directory "~/public_html/"
		:base-extension "org"
		:publishing-directory "~/public_html/"
		:publishing-function (org-rss-publish-to-rss)
		:html-link-home "http://amoghjalihal.com/"
		:html-link-use-abs-url t
		:exclude ".*"
		:include ("social_1.org")))


(setq org-publish-project-alist
      '(("blog"
         :base-directory "~/public_html/"
         :html-extension "html"
         :base-extension "org"
         :publishing-directory "~/public_html/"
         :publishing-function (org-html-publish-to-html)
         :html-preamble nil
         :html-postamble nil
         :html-head-extra
         "<link rel=\"alternate\" type=\"application/rss+xml\"
                href=\"http://amoghjalihal.org/my-blog.xml\"
                title=\"RSS feed for amoghjalihal.org\">")))

#+END_SRC

#+RESULTS:
| blog | :base-directory | ~/public_html/ | :html-extension | html | :base-extension | org | :publishing-directory | ~/public_html/ | :publishing-function | (org-html-publish-to-html) | :html-preamble | nil | :html-postamble | nil | :html-head-extra | <link rel="alternate" type="application/rss+xml" |

** Org-capture
*** Setup
#+BEGIN_SRC emacs-lisp
;; Org-capture setup
(define-key global-map "\C-cc" 'org-capture)
#+END_SRC
*** Capture Templates
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(
          ("t" "Tasks")
          ("tw" "(work) Task/Idea" entry (file+headline "~/jalihal_projects/Research/LabNoteBook.org" "Tasks")
           "** TODO %?  %^g
    :PROPERTIES:
    :CREATED: %U
    :BLOCKER:
    :TRIGGER:
    :END:\n" )

          ("tp" "(personal) Task/Idea" entry (file+headline "~/orgs/PersonalAgenda.org" "Personal Tasks")
           "** TODO %?  %^g
    :PROPERTIES:
    :CREATED: %U
    :BLOCKER:
    :TRIGGER:
    :END:\n" )

          ("c" "Clock tasks")
          ("cw" "work" entry (file+datetree "~/orgs/diary.org")
           "* IN-PROGRESS %? %^g:work:\n%U\n%a\n" :clock-in t :clock-keep t)
          ("cc" "class" entry (file+datetree "~/orgs/diary.org")
           "* IN-PROGRESS %? :class:\n%U\n%a\n" :clock-in t :clock-keep t)
          ("cm" "meeting" entry (file+datetree "~/orgs/diary.org")
           "* IN-PROGRESS Meeting %? :MEETING:\n%U\n" :clock-in t :clock-keep t)
          ("cp" "personal" entry (file+datetree "~/orgs/diary.org")
           "* %?\n%U\n" :clock-in t :clock-keep t)

          ("e" "Entry")
          ("el" "labnotebook" entry (file+datetree "~/jalihal_projects/Research/LabNoteBook.org")
           "* %?
  %U")        

          ("ep" "presentation" entry (file+olp "~/jalihal_projects/Research/LabNoteBook.org" "Presentations")
           "** Meeting -  %U
  ,#+BIND: org-export-use-babel nil
  ,#+STARTUP: beamer
  ,#+OPTIONS: H:1 toc:nil
  ,#+AUTHOR: Amogh Jalihal
  ,#+TITLE: Meeting on %^u
  ,#+EXPORT_FILE_NAME: 
  ,#+LATEX_HEADER: \\usetheme{metropolis}
   #+LATEX_HEADER: \setbeamercolor{background canvas}{bg=white}
  %?" :prepend t :empty-lines 1)
          ("em" "meeting - work" entry (file+olp "~/jalihal_projects/Research/LabNoteBook.org" "Meeting Notes")
           "** Meeting: %? - %U
    :PROPERTIES:
    :CREATED: %U
    :END:
  - " :prepend t :empty-lines 1)        
          ("eM" "meeting - personal" entry (file+olp "~/orgs/meetings-and-discussions.org" "Notes")
           "** With %?
    :PROPERTIES:
    :CREATED: %U
    :END:
     - "  :empty-lines 1)
          ;; Hard coded
          ;; * Classes
          ;; ** Spring 2019
          ;; *** Population Genomics
          ("ec" "Class notes" entry (file+olp "~/orgs/AllNotes.org" "Classes" "Spring 2019" "Population Genomics")
           "** %U
     - %?"  :empty-lines 1)
          ("er" "Reading list " entry (file+olp "~/orgs/AllNotes.org" "Reading List")
           "**  %?
    :PROPERTIES:
    :CREATED: %U
    :CONTEXT: %^{CONTEXT}
    :END:")
          ;;("e" "Event" entry (file+datetree "~/orgs/diary.org")
          ;;"* IN-PROGRESS EVENT with %? :MEETING:\n%t" :clock-in t :clock-resume t)
           ("d" "dump org capture" entry
           (file+headline "~/orgs/dump.org" "Unsorted")
           "* %?%:description Added %U
    ,#+BEGIN_QUOTE
    %x
    ,#+END_QUOTE" :immediate-finish t)

          ("s" "Social" entry (file+olp "~/public_html/social.org" "Social")
           "* \n
    ,#+BEGIN_EXPORT html
    <div class=\"container\">
    ,#+END_EXPORT\n
    %U\n\n%?\n
    ,#+BEGIN_EXPORT html
    </div>
    ,#+END_EXPORT" :prepend t :empty-lines 1)

          ;;("o" "Software and Upkeep" entry (file+datetree "~/orgs/diary.org")
          ;;"* %?:software:\n%t" :clock-in t :clock-resume t)
          ;;("i" "Idea" entry (file org-default-notes-file)
          ;; "* %? :IDEA: \n%t" :clock-in t :clock-resume t)
          ("B" "Behavior" entry (file+datetree "~/orgs/behaviour.org")
           "* %U
           :PROPERTIES:
           :immediate-finish:
           :Water:    %^{Drank?(y/n)|Y|N}
           :Attention: %^{_f_ocussed/_d_istracted|F|D}
           :State:    %^{Feeling _a_ctive/_t_ired?|A|T}
           :END:")
          ;; ("d" "Org-Drill" entry (file+headline "~/orgs/german.org" "Words")
          ;;  "*** %^{Please specify type of word} :drill:\nWhat is the meaning of %^{word}?\n**** Definition\n%^{definition}
          ;;     ")
          ))

  ;;(setq org-capture-templates
  ;;             '("w" "Web site" entry 
  ;;              "* %?\n%c\n%:initial" :clock-in t))

  ;; Allow creation of new parent nodes
  (setq org-refile-allow-creating-parent-nodes `confirm)
  ;; Look up to three levels deep
  (setq org-refile-targets '((org-agenda-files :maxlevel . 4)))
#+END_SRC

#+RESULTS:
: ((org-agenda-files :maxlevel . 4))

*** Capture from browser
#+BEGIN_SRC emacs-lisp
;; Commented the following 4 lines because I don't use them anymore
;; (server-start)
;; (require 'org-protocol) 
;; (add-to-list 'load-path "~/.emacs.d/org-protocol-capture-html/")
;; (require 'org-protocol-capture-html)
;; SOURCE: http://cachestocaches.com/2016/9/my-workflow-org-agenda/
#+END_SRC
** Org-Agenda
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
        ;; The " " here is the shortcut for this agenda, so `C-c a SPC`
        '((" " "Agenda"
           ((agenda "" nil)
           ;;

           ;;
            (tags-todo "paper"
                       ((org-agenda-overriding-header "Paper")))
            (tags-todo "presentation"
                       ((org-agenda-overriding-header "Presentations")))

            (tags-todo "NutSig"
                       ((org-agenda-overriding-header "Model building")))
            (tags-todo "scripting"
                       ((org-agenda-overriding-header "Scripting")))

            (tags-todo "literature"
                       ((org-agenda-overriding-header "Literature")))
            (tags-todo "personal"
                       ((org-agenda-overriding-header "All personal tasks")))

            (tags-todo "work"
                       ((org-agenda-overriding-header "All Research")))
            ;; (tags-todo ""
            ;;            ((org-agenda-overriding-header "Seminar Organization Tasks")))
            ;; (tags-todo "personal"
            ;;            ((org-agenda-overriding-header "Personal Tasks")))
            (todo "TODO"
                  ((org-agenda-overriding-header "Task list")
                   ;; sort by time, priority, and category
                   (org-agenda-sorting-strategy
                    '(time-up priority-down effort-up)))) ;; category-keepx
            ;; Everything on hold
            ;; All "WAITING" items
            (todo "WAITING"
                  ((org-agenda-overriding-header "Future Tasks")))
            )
            )
            ;; ("x" "With deadline columns" agenda* ""
            ;; ((org-agenda-overriding-columns-format "%45ITEM %EFFORT %CLOCKSUM")
            ;; (org-agenda-view-columns-initially t)))
            )
            )
#+END_SRC

#+RESULTS:
|   | Agenda | ((agenda  nil) (tags-todo paper ((org-agenda-overriding-header Paper))) (tags-todo presentation ((org-agenda-overriding-header Presentations))) (tags-todo NutSig ((org-agenda-overriding-header Model building))) (tags-todo scripting ((org-agenda-overriding-header Scripting))) (tags-todo literature ((org-agenda-overriding-header Literature))) (tags-todo personal ((org-agenda-overriding-header All personal tasks))) (tags-todo work ((org-agenda-overriding-header All Research))) (todo TODO ((org-agenda-overriding-header Task list) (org-agenda-sorting-strategy (quote (time-up priority-down effort-up))))) (todo WAITING ((org-agenda-overriding-header Future Tasks)))) |

*** Org agenda column view
[2018-12-02 Sun]
#+BEGIN_SRC elisp
;; format string used when creating CLOCKSUM lines and when generating a
;; time duration (avoid showing days)
(setq org-time-clocksum-format
      '(:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))
#+END_SRC

#+RESULTS:
| :hours | %d | :require-hours | t | :minutes | :%02d | :require-minutes | t |

  
#+RESULTS:
| ((org-agenda-overriding-columns-format %50ITEM %EFFORT %CLOCKSUM)) |

** Org Publishing
#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;; Publishing with org-mode
;; (require 'ox-publish)
;; (setq org-publish-project-alist
;;       '(("org-notes"
;;  :base-directory "~/public_html_generator/"
;;  :base-extension "org"
;;  :publishing-directory "~/public_html/"
;;  :recursive t
;;  :publishing-function org-html-publish-to-html
;;  :headline-levels 4             ; Just the default for this project.
;;  :auto-preamble t
;;  )
;; 	("org-static"
;;  :base-directory "~/public_html_generator/"
;;  :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
;;  :publishing-directory "~/public_html/"
;;  :recursive t
;;  :publishing-function org-publish-attachment
;;  )
;; 	("org" :components ("org-notes" "org-static"))))
#+END_SRC

** Inline Image setting for Org-mode
#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Targets include this file and any file contributing to the agenda - up to 5 levels deep
(setq org-image-actual-width nil)
(setq org-toggle-inline-images t)
#+END_SRC
<2018-10-26 Fri>
Refresh inline display
#+BEGIN_SRC elisp
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
#+END_SRC

#+RESULTS:
| org-display-inline-images |

** Org-git-link
#+BEGIN_SRC emacs-lisp
(load-file "~/.emacs.d/org-git-link.el")
#+END_SRC
** Org-reports
Does this do anything?
#+BEGIN_SRC emacs-lisp
  ;;; customizing org-reports table
  ;; (defun org-dblock-write:rangereport (params)
  ;;   "Display day-by-day time reports."
  ;;   (let* ((ts (plist-get params :tstart))
  ;;          (te (plist-get params :tend))
  ;;          (start (time-to-seconds
  ;;                  (apply 'encode-time (org-parse-time-string ts))))
  ;;          (end (time-to-seconds
  ;;                (apply 'encode-time (org-parse-time-string te))))
  ;;          day-numbers)
  ;;     (setq params (plist-put params :tstart nil))
  ;;     (setq params (plist-put params :end nil))
  ;;     (while (<= start end)
  ;;       (save-excursion
  ;;         (insert "\n\n"
  ;;                 (format-time-string (car org-time-stamp-formats)
  ;;                                     (seconds-to-time start))
  ;;                 "----------------\n")
  ;;         (org-dblock-write:clocktable
  ;;          (plist-put
  ;;           (plist-put
  ;;            params
  ;;            :tstart
  ;;            (format-time-string (car org-time-stamp-formats)
  ;;                                (seconds-to-time start)))
  ;;           :tend
  ;;           (format-time-string (car org-time-stamp-formats)
  ;;                               (seconds-to-time end))))
  ;;         (setq start (+ 86400 start))))))

#+END_SRC
** Org-ref
#+BEGIN_SRC emacs-lisp
  ;;(add-to-list 'load-path "~/.emacs.d/org-ref/") 
  (setq reftex-default-bibliography '("~/jalihal_projects/Research/references.bib"))

  (setq org-ref-bibliography-notes "~/jalihal_projects/Research/notes.org"
	org-ref-default-bibliography '("~/jalihal_projects/Research/references.bib")
  ;;      org-ref-default-bibliography '("~/Unison/YeastNutBib.bib")
	org-ref-pdf-directory "~/jalihal_projects/bibtex-pdfs/")
(require 'org-ref)
#+END_SRC
*** Some shortcuts
**** Crossref-add-bib-entry
<2018-01-16 Tue>
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c b") 'crossref-add-bibtex-entry)
#+END_SRC
** Comment blocks in Org-mode
#+BEGIN_SRC emacs-lisp
;;(add-to-list 'org-structure-template-alist '("C" "#+begin_comment\n?\n#+end_comment"))
#+END_SRC
** Org-Edna
#+BEGIN_SRC emacs-lisp
(org-edna-load)
#+END_SRC
** COMMENT Org-Notify
#+BEGIN_SRC emacs-lisp

#+END_SRC

#+RESULTS:
: org-notify
** Org-alert
[2019-02-07 Thu]
- Shows TODO items for the day every 5 minutes.
#+begin_src emacs-lisp
  (require 'org-alert)
  (setq alert-default-style 'libnotify)
  (setq org-alert-interval 3600)
  (org-alert-enable)
#+end_src

#+RESULTS:
: [nil 23647 12124 168786 3600 org-alert-check nil nil 241000]

** Calfw: Calender Framework
#+BEGIN_SRC emacs-lisp
  ;; (require 'calfw)
  ;; (require 'calfw-org)
  ;; (setq cfw:org-overwrite-default-keybinding t)
  ;; (global-set-key (kbd "M-C") 'cfw:open-org-calendar)
#+END_SRC   
** Effort Estimates and agenda options
<2018-01-04 Thu>
#+BEGIN_SRC emacs-lisp
(setq org-global-properties
    '(("Effort_ALL". "0 0:10 0:30 1:00 2:00 3:00 4:00 8:00")))
#+END_SRC   
** Appointment notifications in org-mode
<2018-01-04 Thu>
From [[http://sachachua.com/blog/2007/11/setting-up-appointment-reminders-in-org/][here]] 
#+BEGIN_SRC emacs-lisp
   ;; Make appt aware of appointments from the agenda
  ;; (defun org-agenda-to-appt ()
  ;;   "Activate appointments found in `org-agenda-files'."
  ;;   (interactive)
  ;;   (require 'org)
  ;;   (let* ((today (org-date-to-gregorian
  ;; 		 (time-to-days (current-time))))
  ;; 	 (files org-agenda-files) entries file)
  ;;     (while (setq file (pop files))
  ;;       (setq entries (append entries (org-agenda-get-day-entries
  ;; 				     file today :timestamp))))
  ;;     (setq entries (delq nil entries))
  ;;     (mapc (lambda(x)
  ;; 	    (let* ((event (org-trim (get-text-property 1 'txt x)))
  ;; 		   (time-of-day (get-text-property 1 'time-of-day x)) tod)
  ;; 	      (when time-of-day
  ;; 		(setq tod (number-to-string time-of-day)
  ;; 		      tod (when (string-match
  ;; 				  "\\([0-9]\\{1,2\\}\\)\\([0-9]\\{2\\}\\)" tod)
  ;; 			     (concat (match-string 1 tod) ":"
  ;; 				     (match-string 2 tod))))
  ;; 		(if tod (appt-add tod event))))) entries)))

  ;; (org-agenda-to-appt)
#+END_SRC
** Org-brain
#+BEGIN_SRC emacs-lisp
  (use-package org-brain :ensure t
    :init
    (setq org-brain-path "~/orgs/brain/")
    ;; For Evil users
    ;  (eval-after-load 'evil
  ;    (evil-set-initial-state 'org-brain-visualize-mode 'emacs))
    :config
    (setq org-id-track-globally t)
    (setq org-id-locations-file "~/.emacs.d/.org-id-locations")
    (push '("b" "Brain" plain (function org-brain-goto-end)
            "* %i%?" :empty-lines 1)
          org-capture-templates)
    (setq org-brain-visualize-default-choices 'all)
    (setq org-brain-title-max-length 75))
#+END_SRC

#+RESULTS:
: t

** Org-dashboard
<2018-01-06 Sat>
- Configured to stop displaying completed projects
#+BEGIN_SRC emacs-lisp
   (defun my/org-dashboard-filter (entry)
     (and ;;(> (plist-get entry :progress-percent) 0)
          (< (plist-get entry :progress-percent) 100)
          (not (member "archive" (plist-get entry :tags)))))

   (setq org-dashboard-filter 'my/org-dashboard-filter)

#+END_SRC
** Org-bullets
<2018-01-07 Sun>
#+BEGIN_SRC emacs-lisp
  ;; (require 'org-bullets)
  ;; (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC
** Org clock
*** Custom Shortcuts
<2018-01-17 Wed>
#+BEGIN_SRC emacs-lisp
;;(global-set-key (kbd "C-c j") 'org-clock-jump-to-current-clock)
;; Changed in Org 9
(global-set-key (kbd "C-c j") 'org-clock-goto)
#+END_SRC

#+RESULTS:
: org-clock-goto

** Inline latex highlighting
<2018-02-14 Wed>
#+BEGIN_SRC emacs-lisp
(setq org-highlight-latex-and-related '(latex))
#+END_SRC
** Larger inline latex
#+BEGIN_SRC emacs-lisp
(plist-put org-format-latex-options :scale 1.5)
#+END_SRC
** Org-drill

<2018-03-10 Sat>
#+BEGIN_SRC emacs-lisp
;;(require 'org-drill)
#+END_SRC
** Org-advance
#+BEGIN_SRC emacs-lisp
(defun org-advance ()
  (interactive)
  (when (buffer-narrowed-p)
  (beginning-of-buffer)
  (widen)
  (org-forward-heading-same-level 1))
    (org-narrow-to-subtree))
(global-set-key (kbd "C-x n f") 'org-advance)
(defun org-retreat ()
  (interactive)
  (when (buffer-narrowed-p)
    (beginning-of-buffer)
    (widen)
   (org-backward-heading-same-level 1))
   (org-narrow-to-subtree))
(global-set-key (kbd "C-x n k") 'org-retreat)
#+END_SRC
** Ox-latex
#+BEGIN_SRC emacs-lisp
(require 'ox-latex)
;;(setq org-latex-listings 'minted)
;;(add-to-list 'org-latex-minted-langs '(ipython "python"))
#+END_SRC
[2019-01-03 Thu]
From John Kitchin's blog
#+begin_src emacs-lisp
  (org-add-link-type
   "comment"
   (lambda (linkstring)
     (let ((elm (org-element-context))
           (use-dialog-box nil))
       (when (y-or-n-p "Delete comment? ")
         (setf (buffer-substring
                (org-element-property :begin elm)
                (org-element-property :end elm))
               (cond
                ((org-element-property :contents-begin elm)
                 (buffer-substring
                  (org-element-property :contents-begin elm)
                  (org-element-property :contents-end elm)))
                (t
                 ""))))))
   (lambda (keyword desc format)
     (cond
      ((eq format 'html)
       (format "<font color=\"red\"><abbr title=\"%s\" color=\"red\">COMMENT</abbr></font> %s" keyword (or desc "")))
      ((eq format 'latex)
      ;; AJ: Ignore the description, format the link part inline
      (format "%% %s\n" keyword)))))
#+end_src

#+RESULTS:
: Created comment link.

** Ox-ipynb
#+BEGIN_SRC emacs-lisp

  (require 'ox-ipynb)
#+END_SRC
** Org notmuch
<2018-04-23 Mon>
#+BEGIN_SRC emacs-lisp
  (require 'org-notmuch)
#+END_SRC

#+RESULTS:
: org-notmuch

** Org-habit
<2018-06-11 Mon>
Playing around with org-habit to help Sumanth get the consistency
graph working
#+BEGIN_SRC emacs-lisp
(require 'org-habit)
#+END_SRC
** Org-gnome
#+BEGIN_SRC emacs-lisp
  ;; (require 'org-gnome) 
  ;; (setq org-gnome-integrate-with-calendar t)
  ;; (org-gnome-turn-on)
#+END_SRC

#+RESULTS:

** Org-mode Tufte theme
#+BEGIN_SRC elisp
  ;; (use-package org
  ;;   :ensure org-plus-contrib
  ;;   :mode ("\\.org\\'" . org-mode)
  ;;   :bind
  ;;   (("C-c l" . org-store-link)
  ;;    ("C-c a" . org-agenda)
  ;;    ("C-c b" . org-iswitchb)
  ;;    ("C-c c" . org-capture))
  ;;   :bind
  ;;   (:map org-mode-map
  ;;         ("M-n" . outline-next-visible-heading)
  ;;         ("M-p" . outline-previous-visible-heading))
  ;;   :custom
  ;;   (org-return-follows-link t)
  ;;   (org-agenda-diary-file "~/.org/diary.org")
  ;;   (org-babel-load-languages
  ;;    '((emacs-lisp . t)
  ;;      (python . t)))
  ;;   :custom-face
  ;;   (variable-pitch ((t (:family "ETBembo"))))
  ;;   (org-document-title ((t (:foreground "#171717" :weight bold :height 1.5))))
  ;;   (org-done ((t (:background "#E8E8E8" :foreground "#0E0E0E" :strike-through t :weight bold))))
  ;;   (org-headline-done ((t (:foreground "#171717" :strike-through t))))
  ;;   (org-level-1 ((t (:foreground "#090909" :weight bold :height 1.3))))
  ;;   (org-level-2 ((t (:foreground "#090909" :weight normal :height 1.2))))
  ;;   (org-level-3 ((t (:foreground "#090909" :weight normal :height 1.1))))
  ;;   (org-image-actual-width '(600))
  ;;   :config
  ;;   (add-to-list 'org-structure-template-alist '("el" "#+BEGIN_SRC emacs-lisp :tangle yes?\n\n#+END_SRC")))

  ;; (add-hook 'org-mode-hook
  ;;           '(lambda ()
  ;;              (setq line-spacing 0.2) ;; Add more line padding for readability
  ;;              (variable-pitch-mode 1) ;; All fonts with variable pitch.
  ;;              (mapc
  ;;               (lambda (face) ;; Other fonts with fixed-pitch.
  ;;                 (set-face-attribute face nil :inherit 'fixed-pitch))
  ;;               (list 'org-code
  ;;                     'org-link
  ;;                     'org-block
  ;;                     'org-table
  ;;                     'org-verbatim
  ;;                     'org-block-begin-line
  ;;                     'org-block-end-line
  ;;                     'org-meta-line
  ;;                     'org-document-info-keyword))))

  ;;  (org-document-title
  ;;    (:inherit variable-pitch
  ;;              :height 1.3
  ;;              :weight normal
  ;;              :foreground ,gray)
  ;;    (:inherit nil
  ;;              :family ,et-font
  ;;              :height 1.8
  ;;              :foreground ,bg-dark
  ;;              :underline nil))
  ;;   (org-document-info
  ;;    (:foreground ,gray
  ;;                 :slant italic)
  ;;    (:height 1.2
  ;;             :slant italic))
  ;;   (org-level-1
  ;;    (:inherit variable-pitch
  ;;              :height 1.3
  ;;              :weight bold
  ;;              :foreground ,keyword
  ;;              :background ,bg-dark)
  ;;    (:inherit nil
  ;;              :family ,et-font
  ;;              :height 1.6
  ;;              :weight normal
  ;;              :slant normal
  ;;              :foreground ,bg-dark))
  ;;   (org-level-2
  ;;    (:inherit variable-pitch
  ;;              :weight bold
  ;;              :height 1.2
  ;;              :foreground ,gray
  ;;              :background ,bg-dark)
  ;;    (:inherit nil
  ;;              :family ,et-font
  ;;              :weight normal
  ;;              :height 1.3
  ;;              :slant italic
  ;;              :foreground ,bg-dark))
  ;;   (org-level-3
  ;;    (:inherit variable-pitch
  ;;              :weight bold
  ;;              :height 1.1
  ;;              :foreground ,slate
  ;;              :background ,bg-dark)
  ;;    (:inherit nil
  ;;              :family ,et-font
  ;;              :weight normal
  ;;              :slant italic
  ;;              :height 1.2
  ;;              :foreground ,bg-dark))
  ;;   (org-level-4
  ;;    (:inherit variable-pitch
  ;;              :weight bold
  ;;              :height 1.1
  ;;              :foreground ,slate
  ;;              :background ,bg-dark)
  ;;    (:inherit nil
  ;;              :family ,et-font
  ;;              :weight normal
  ;;              :slant italic
  ;;              :height 1.1
  ;;              :foreground ,bg-dark))
  ;;   (org-level-5
  ;;    (:inherit variable-pitch
  ;;              :weight bold
  ;;              :height 1.1
  ;;              :foreground ,slate
  ;;              :background ,bg-dark)
  ;;    nil)
  ;;   (org-level-6
  ;;    (:inherit variable-pitch
  ;;              :weight bold
  ;;              :height 1.1
  ;;              :foreground ,slate
  ;;              :background ,bg-dark)
  ;;    nil)
  ;;   (org-level-7
  ;;    (:inherit variable-pitch
  ;;              :weight bold
  ;;              :height 1.1
  ;;              :foreground ,slate
  ;;              :background ,bg-dark)
  ;;    nil)
  ;;   (org-level-8
  ;;    (:inherit variable-pitch
  ;;              :weight bold
  ;;              :height 1.1
  ;;              :foreground ,slate
  ;;              :background ,bg-dark)
  ;;    nil)
  ;;   (org-headline-done
  ;;    (:strike-through t)
  ;;    (:family ,et-font
  ;;             :strike-through t))
  ;;   (org-quote
  ;;    (:background ,bg-dark)
  ;;    nil)
  ;;   (org-block
  ;;    (:background ,bg-dark)
  ;;    (:background nil
  ;;                 :foreground ,bg-dark))
  ;;   (org-block-begin-line
  ;;    (:background ,bg-dark)
  ;;    (:background nil
  ;;                 :height 0.8
  ;;                 :family ,sans-mono-font
  ;;                 :foreground ,slate))
  ;;   (org-block-end-line
  ;;    (:background ,bg-dark)
  ;;    (:background nil
  ;;                 :height 0.8
  ;;                 :family ,sans-mono-font
  ;;                 :foreground ,slate))
  ;;   (org-document-info-keyword
  ;;    (:foreground ,comment)
  ;;    (:height 0.8
  ;;             :foreground ,gray))
  ;;   (org-link
  ;;    (:underline nil
  ;;                :weight normal
  ;;                :foreground ,slate)
  ;;    (:foreground ,bg-dark))
  ;;   (org-special-keyword
  ;;    (:height 0.9
  ;;             :foreground ,comment)
  ;;    (:family ,sans-mono-font
  ;;             :height 0.8))
  ;;   (org-todo
  ;;    (:foreground ,builtin
  ;;                 :background ,bg-dark)
  ;;    nil)
  ;;   (org-done
  ;;    (:inherit variable-pitch
  ;;              :foreground ,dark-cyan
  ;;              :background ,bg-dark)
  ;;    nil)
  ;;   (org-agenda-current-time
  ;;    (:foreground ,slate)
  ;;    nil)
  ;;   (org-hide
  ;;    nil
  ;;    (:foreground ,bg-white))
  ;;   (org-indent
  ;;    (:inherit org-hide)
  ;;    (:inherit (org-hide fixed-pitch)))
  ;;   (org-time-grid
  ;;    (:foreground ,comment)
  ;;    nil)
  ;;   (org-warning
  ;;    (:foreground ,builtin)
  ;;    nil)
  ;;   (org-date
  ;;    nil
  ;;    (:family ,sans-mono-font
  ;;             :height 0.8))
  ;;   (org-agenda-structure
  ;;    (:height 1.3
  ;;             :foreground ,doc
  ;;             :weight normal
  ;;             :inherit variable-pitch)
  ;;    nil)
  ;;   (org-agenda-date
  ;;    (:foreground ,doc
  ;;                 :inherit variable-pitch)
  ;;    (:inherit variable-pitch
  ;;              :height 1.1))
  ;;   (org-agenda-date-today
  ;;    (:height 1.5
  ;;             :foreground ,keyword
  ;;             :inherit variable-pitch)
  ;;    nil)
  ;;   (org-agenda-date-weekend
  ;;    (:inherit org-agenda-date)
  ;;    nil)
  ;;   (org-scheduled
  ;;    (:foreground ,gray)
  ;;    nil)
  ;;   (org-upcoming-deadline
  ;;    (:foreground ,keyword)
  ;;    nil)
  ;;   (org-scheduled-today
  ;;    (:foreground ,fg-white)
  ;;    nil)
  ;;   (org-scheduled-previously
  ;;    (:foreground ,slate)
  ;;    nil)
  ;;   (org-agenda-done
  ;;    (:inherit nil
  ;;              :strike-through t
  ;;              :foreground ,doc)
  ;;    (:strike-through t
  ;;                     :foreground ,doc))
  ;;   (org-ellipsis
  ;;    (:underline nil
  ;;                :foreground ,comment)
  ;;    (:underline nil
  ;;                :foreground ,comment))
  ;;   (org-tag
  ;;    (:foreground ,doc)
  ;;    (:foreground ,doc))
  ;;   (org-table
  ;;    (:background nil)
  ;;    (:family ,serif-mono-font
  ;;             :height 0.9
  ;;             :background ,bg-white))
  ;;   (org-code
  ;;    (:inherit font-lock-builtin-face)
  ;;    (:inherit nil
  ;;              :family ,serif-mono-font
  ;;              :foreground ,comment
  ;; :height 0.9))
#+END_SRC

#+RESULTS:
| (lambda nil (setq line-spacing 0.2) (variable-pitch-mode 1) (mapc (lambda (face) (set-face-attribute face nil :inherit (quote fixed-pitch))) (list (quote org-code) (quote org-link) (quote org-block) (quote org-table) (quote org-verbatim) (quote org-block-begin-line) (quote org-block-end-line) (quote org-meta-line) (quote org-document-info-keyword)))) | org-ref-org-menu | (lambda nil (delete (quote (\.pdf\' . default)) org-file-apps) (add-to-list (quote org-file-apps) (quote (\.pdf\' . evince %s)))) | ob-ipython-auto-configure-kernels | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-block-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-eldoc-load |

** Org-babel-screen
#+BEGIN_SRC elisp
(require 'org-babel-screen) 
#+END_SRC
** Better Ediff for org-mode
<2018-10-26 Fri>
From [[https://emacs.stackexchange.com/questions/21335/prevent-folding-org-files-opened-by-ediff][here]]
#+BEGIN_SRC elisp
;; Check for org mode and existence of buffer
(defun f-ediff-org-showhide (buf command &rest cmdargs)
  "If buffer exists and is orgmode then execute command"
  (when buf
    (when (eq (buffer-local-value 'major-mode (get-buffer buf)) 'org-mode)
      (save-excursion (set-buffer buf) (apply command cmdargs)))))

(defun f-ediff-org-unfold-tree-element ()
  "Unfold tree at diff location"
  (f-ediff-org-showhide ediff-buffer-A 'org-reveal)  
  (f-ediff-org-showhide ediff-buffer-B 'org-reveal)  
  (f-ediff-org-showhide ediff-buffer-C 'org-reveal))

(defun f-ediff-org-fold-tree ()
  "Fold tree back to top level"
  (f-ediff-org-showhide ediff-buffer-A 'hide-sublevels 1)  
  (f-ediff-org-showhide ediff-buffer-B 'hide-sublevels 1)  
  (f-ediff-org-showhide ediff-buffer-C 'hide-sublevels 1))

(add-hook 'ediff-select-hook 'f-ediff-org-unfold-tree-element)
(add-hook 'ediff-unselect-hook 'f-ediff-org-fold-tree)
#+END_SRC

#+RESULTS:
| f-ediff-org-fold-tree |
** Org download
<2018-11-28 Wed>
#+begin_src elisp
    (setq-default org-download-image-dir "~/orgs/downloads/")
(add-hook 'dired-mode-hook 'org-download-enable)
#+end_src  

#+RESULTS:
| org-download-enable | (lambda nil (dired-hide-details-mode)) |
** Save all org buffers after refile
#+BEGIN_SRC elisp
(advice-add 'org-refile :after 'org-save-all-org-buffers)
#+END_SRC

#+RESULTS:
** Customizing org-todo keywords
#+BEGIN_SRC elisp
  (setq org-todo-keyword-faces
        '(("TODO" . org-warning) ("FAILED" . "yellow")
          ("CANCELED" . "yellow")
          ("IN-PROGRESS" . (:foreground "blue"))))
#+END_SRC

#+RESULTS:
: ((TODO . org-warning) (FAILED . yellow) (CANCELED . yellow) (IN-PROGRESS :foreground blue))
** Ox-rst
[2018-12-16 Sun]
#+BEGIN_SRC emac-lisp
(require 'ox-rst)
#+END_SRC
** Org noter
[2019-01-14 Mon]
#+begin_src emacs-lisp
  (setq ;;org-noter-property-doc-file "~/orgs/org-noter-notes/"
        ;;org-noter-property-note-location "~/orgs/org-noter-notes/"
        org-noter-default-notes-file-names '("Notes.org")
        org-noter-notes-search-path '("~/orgs/org-noter-notes/")
)
#+end_src

#+RESULTS:
| ~/orgs/org-noter-notes/ |

** Org-emms
[2019-02-10 Sun]
#+begin_src emacs-lisp
(require 'org-emms)
#+end_src

#+RESULTS:
: org-emms

* Autocomplete
** Require auto-complete
#+BEGIN_SRC emacs-lisp
  ;; (require 'auto-complete)
  ;; (require 'auto-complete-config)
  ;; (ac-config-default)
#+END_SRC
** Special autocomplete modes
*** Latex
#+BEGIN_SRC emacs-lisp
  ;; (require 'ac-math) 
  ;; (add-to-list 'ac-modes 'latex-mode)   ; make auto-complete aware of `latex-mode`

  ;;  (defun ac-LaTeX-mode-setup () ; add ac-sources to default ac-sources
  ;;    (setq ac-sources
  ;;          (append '(ac-source-math-unicode ac-source-math-latex ac-source-latex-commands)
  ;;                  ac-sources))
  ;;    )
  ;; (add-hook 'LaTeX-mode-hook 'ac-LaTeX-mode-setup)
  ;; ;(global-auto-complete-mode t)
 
  ;; (setq ac-math-unicode-in-math-p t)
  ;; (setq ac-math-unicode-in-math-p t)
#+END_SRC
* RSS feeds in emacs
<2018-02-08 Thu>
Source: http://pragmaticemacs.com/emacs/read-your-rss-feeds-in-emacs-with-elfeed/
#+BEGIN_SRC emacs-lisp
  (require 'elfeed)
  (global-set-key (kbd "C-x w") 'elfeed)

  ;; use an org file to organise feeds
  (use-package elfeed-org
    :ensure t
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list "~/orgs/elfeed.org")))
#+END_SRC
Some bookmarks
#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; elfeed feed reader                                                     ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;shortcut functions
  ;; (defun bjm/elfeed-show-all ()
  ;; (interactive)
  ;; (bookmark-maybe-load-default-file)
  ;; (bookmark-jump "elfeed-all"))
  ;; (defun bjm/elfeed-show-science ()
  ;; (interactive)
  ;; (bookmark-maybe-load-default-file)
  ;; (bookmark-jump "elfeed-science"))
  ;; (defun bjm/elfeed-show-daily ()
  ;; (interactive)
  ;; (bookmark-maybe-load-default-file)
  ;; (bookmark-jump "elfeed-software"))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  ;; (use-package elfeed
  ;;   :ensure t
  ;;   :bind (:map elfeed-search-mode-map
  ;; 	      ("A" . bjm/elfeed-show-all)
  ;; 	      ("S" . bjm/elfeed-show-science)
  ;; 	      ("O" . bjm/elfeed-show-software)))
                ;; ("D" . bjm/elfeed-show-daily)
                ;; ("q" . bjm/elfeed-save-db-and-bury)))
#+END_SRC
[2019-01-29 Tue]
Star and unstar entries
From [[http://pragmaticemacs.com/emacs/star-and-unstar-articles-in-elfeed/][Pragmatic Emacs]]
#+begin_src emacs-lisp
;; code to add and remove a starred tag to elfeed article
;; based on http://matt.hackinghistory.ca/2015/11/22/elfeed/

;; add a star
(defun bjm/elfeed-star ()
  "Apply starred to all selected entries."
  (interactive )
  (let* ((entries (elfeed-search-selected))
         (tag (intern "starred")))

    (cl-loop for entry in entries do (elfeed-tag entry tag))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))

;; remove a start
(defun bjm/elfeed-unstar ()
  "Remove starred tag from all selected entries."
  (interactive )
  (let* ((entries (elfeed-search-selected))
         (tag (intern "starred")))

    (cl-loop for entry in entries do (elfeed-untag entry tag))
    (mapc #'elfeed-search-update-entry entries)
    (unless (use-region-p) (forward-line))))

;; face for starred articles
(defface elfeed-search-starred-title-face
  '((t :foreground "#f77"))
  "Marks a starred Elfeed entry.")

(push '(starred elfeed-search-starred-title-face) elfeed-search-face-alist)

;; add keybindings
(eval-after-load 'elfeed-search
  '(define-key elfeed-search-mode-map (kbd "*") 'bjm/elfeed-star))
(eval-after-load 'elfeed-search
  '(define-key elfeed-search-mode-map (kbd "8") 'bjm/elfeed-unstar))
#+end_src

#+RESULTS:
: bjm/elfeed-unstar

* EIN setup
#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;;;;;;;;;;;;;;;;;;;;EIN setup;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;(require 'ein)
  ;;(setq ein:use-auto-complete t)
  ;;(setenv "PYTHONPATH""/home/ajalihal/anaconda3/bin/python")

  ;; Current setup
  ;; (setq python-shell-interpreter "/home/ajalihal/anaconda3/bin/python3.4")
  ;; (add-hook 'python-mode-hook 'run-python)
#+END_SRC

* Latex
** Org-latex: Syntax Highlighting for code Export
#+BEGIN_SRC emacs-lisp
  ;; Add minted to the defaults packages to include when exporting.
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  ;; Tell the latex export to use the minted package for source
  ;; code coloration.
  (setq org-latex-listings 'minted)
  ;; Let the exporter use the -shell-escape option to let latex
  ;; execute external programs.
  ;; This obviously and can be dangerous to activate!
  ;; When using minted, use this:
  (setq org-latex-pdf-process
  (quote ("pdflatex -shell-escape -synctex=1 -interaction nonstopmode %f" "bibtex %b" "bibtex %b" "pdflatex -shell-escape -interaction nonstopmode %f" "pdflatex -shell-escape -interaction nonstopmode %f")))
  ;; The following file seems to slow down startup .
  ;; (load "~/.emacs.d/lisp/ox-synctex.el")
  ;; (ox-synctex-activate)
#+END_SRC

#+RESULTS:
** Auctex latex export style
[2019-01-28 Mon]
#+begin_src emacs-lisp
(setq LaTeX-command-style '(("" "%(PDF)%(latex) %(file-line-error) %(extraopts) -shell-escape %S%(PDFout)")))
#+end_src

#+RESULTS:
|   | %(PDF)%(latex) %(file-line-error) %(extraopts) -shell-escape %S%(PDFout) |
** Synctex
[2019-01-28 Mon]
#+begin_src emacs-lisp

   (setq TeX-source-correlate-method (quote synctex))
   (setq TeX-source-correlate-mode t)
   (setq TeX-source-correlate-start-server t)
   (setq TeX-view-program-selection '((output-pdf "PDF Tools")))
   (add-hook 'TeX-after-compilation-finished-functions
   #'TeX-revert-document-buffer)

   ;;(setq TeX-view-program-list (quote (("Okular" "okular --unique %o#src:%n%b"))))
   ;;(setq TeX-view-program-selection (quote ((engine-omega "dvips and gv") (output-dvi "xdvi") (output-pdf "Okular") (output-html "xdg-open")))))
#+end_src

#+RESULTS:
| Okular | okular --unique %o#src:%n%b |

** My customizations
[2019-01-28 Mon]
#+begin_src emacs-lisp
   (setq TeX-auto-save t)
   (setq TeX-parse-self t)
   (setq-default TeX-master nil)

   (require 'reftex)
   (add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode

   (require 'company-auctex)
  (company-auctex-init)
#+end_src

** Auctex synctex configuration
#+begin_src emacs-lisp
  ;; Use pdf-tools to open PDF files
;;(server-start)
  (setq TeX-view-program-selection '((output-pdf "PDF Tools")))

     (setq TeX-source-correlate-method 'synctex)

     (setq TeX-source-correlate-mode t)

     (setq TeX-source-correlate-start-server t)


  (add-hook 'TeX-after-compilation-finished-functions
             #'TeX-revert-document-buffer)
     ;;'(TeX-view-program-list (quote (("Okular" "okular --unique %o#src:%n%b"))))
     ;;'(TeX-view-program-selection (quote ((engine-omega "dvips and gv") (output-dvi "xdvi") (output-pdf "Okular") (output-html "xdg-open")))))
#+end_src

#+RESULTS:
| TeX-revert-document-buffer |

* PDF-tools
+Deleted package on <2018-01-02 Tue>+
Reinstalling on cerevisaj on <2018-01-02 Tue>
#+BEGIN_SRC emacs-lisp
  ;; installation for pdf-tools
  ;;(pdf-tools-install)
  (setq-default pdf-view-midnight-colors '("#d4d4d6" . "#000000")) ;;'( "#00E3FF" . "#372963" );;
(use-package pdf-tools
  :ensure t
  :mode ("\\.pdf\\'" . pdf-tools-install)
  :bind ("C-c C-g" . pdf-sync-forward-search)
  :defer t
  :config
  (setq mouse-wheel-follow-mouse t)
  (setq pdf-view-resize-factor 1.10)

)  ;; "#313133")) 
#+END_SRC

#+RESULTS:
: pdf-sync-forward-search
[2019-02-20 Wed]
Customizing midnight mode colors
#+begin_src emacs-lisp

#+end_src

#+RESULTS:
: (#d4d4d6 . #000000)

* Utilities
** Neotree
#+BEGIN_SRC emacs-lisp
  ;; Neotree directory browser
  ;;(require 'neotree)
  ;; (global-set-key [f8] 'neotree-toggle)
#+END_SRC
** Magit
<2018-04-04 Wed>
#+BEGIN_SRC emacs-lisp
   (require 'magit)
  (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC
** Magit todos   
<2018-09-10 Mon>
#+BEGIN_SRC elisp
(require 'magit-todos)

#+END_SRC
** Forge
#+begin_src emacs-lisp
  ;; (use-package forge
  ;;   :after magit)
#+end_src

#+RESULTS:
: t

** Pomodoro
#+BEGIN_SRC emacs-lisp
  ;; (gtk-pomodoro-indicator
  ;;  (cl-case state
  ;;    (:pomodoro "p 25")
  ;;    (:short-break "b 5")
  ;;    (:long-break "b 20")
  ;;    (t (error "unexpected"))))
  ;; (require 'pomodoro)
#+END_SRC
** Evil mode
#+BEGIN_SRC emacs-lisp
;;(require 'evil)
;;(evil-mode 1)
#+END_SRC
** XPP-mode
#+BEGIN_SRC emacs-lisp
  ;; (autoload 'xpp-mode "xpp" "Enter XPP mode." t)
  ;; (setq auto-mode-alist (cons '("\\.ode\\'" . xpp-mode) auto-mode-alist))
#+END_SRC
** Fonts?
#+BEGIN_SRC emacs-lisp
  ;; (add-to-list 'bdf-directory-list "/usr/share/emacs/fonts/bdf")
#+END_SRC

* Unsorted
#+BEGIN_SRC emacs-lisp
  ;; (use-package ox-latex-subfigure
  ;; :init
  ;;   (setq org-latex-caption-above nil
  ;;         org-latex-prefer-user-labels t)
  ;;   :load-path "~/.emacs.d/elpa/ox-latex-subfigure/"
  ;;   :config (require 'ox-latex-subfigure))
  (add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/") t)
  ;;;;; move between buffers using shift arrows
  ;;(when (fboundp 'windmove-default-keybindings)
  ;;  (windmove-default-keybindings))

  ;; Currently replaced ^ keybinding with the switch-window setting. Might change back if that is too distracting
  ;; Disable the splash screen (to enable it agin, replace the t with 0)
  (setq inhibit-splash-screen t)

  ;; Enable transient mark mode
  (transient-mark-mode 1)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
#+END_SRC
* EMMS
** Basics
<2018-02-25 Sun>
#+BEGIN_SRC emacs-lisp
(require 'emms-setup)
        (emms-standard)
        (emms-default-players)
  ;; (require 'emms-setup)
  ;;         (emms-standard)
  ;;         (emms-default-players)
#+END_SRC
* Twittering mode
<2018-04-21 Sat>
#+BEGIN_SRC emacs-lisp
(require 'twittering-mode)
#+END_SRC
* Popwin
Required for offlineimap buffer?
#+BEGIN_SRC emacs-lisp
(require 'popwin)
(popwin-mode 1)
#+END_SRC
* Notmuch
Setup from https://kkatsuyuki.github.io/notmuch-conf/#orgeb16d6a
<2018-04-22 Sun>
** Notmuch setup
 #+BEGIN_SRC emacs-lisp
   (autoload 'notmuch "notmuch" "notmuch mail" t)
   (require 'notmuch)
   ;; setup the mail address and use name
   (setq mail-user-agent 'message-user-agent)
   (setq user-mail-address "amogh.jalihal@gmail.com"
         user-full-name "Amogh Jalihal")
   ;; smtp config
   (setq smtpmail-smtp-server "smtp.gmail.com"
         message-send-mail-function 'message-smtpmail-send-it)

   ;; report problems with the smtp server
   (setq smtpmail-debug-info t)
   ;; add Cc and Bcc headers to the message buffer
   (setq message-default-mail-headers "Cc: \nBcc: \n")
   ;; postponed message is put in the following draft directory
   (setq message-auto-save-directory "~/mail/draft")
   (setq message-kill-buffer-on-exit t)
   ;; change the directory to store the sent mail
   (setq message-directory "~/mail/")


   (defun notmuch-exec-offlineimap ()
       "execute offlineimap"
       (interactive)
       (set-process-sentinel
        (start-process-shell-command "offlineimap"
                                     "*offlineimap*"
                                     "offlineimap -o")
        '(lambda (process event)
           (notmuch-refresh-all-buffers)
           (let ((w (get-buffer-window "*offlineimap*")))
             (when w
               (with-selected-window w (recenter (window-end)))))))
       (popwin:display-buffer "*offlineimap*"))

   (add-to-list 'popwin:special-display-config
                '("*offlineimap*" :dedicated t :position bottom :stick t
                  :height 0.4 :noselect t))
 #+END_SRC
** Sending email
#+BEGIN_SRC emacs-lisp
  (setq mail-user-agent 'message-user-agent)

  (setq user-mail-address "amogh.jalihal@gmail.com"
        user-full-name "Amogh Jalihal")

  (setq smtpmail-stream-type 'ssl
        smtpmail-smtp-server "smtp.gmail.com"
        smtpmail-smtp-service 465)
#+END_SRC
** Custom Keybindings
From the notmuch emacs page
#+BEGIN_SRC emacs-lisp
   (define-key notmuch-show-mode-map "d"
     (lambda ()
       "move message to deleted"
       (interactive)
       (notmuch-show-tag (list "+deleted" "-inbox"))))

  ;;    ;; (define-key notmuch-show-mode-map "d"
  ;;    ;;   (lambda ()
  ;;    ;;     "toggle deleted tag for message"
  ;;    ;;     (interactive)
  ;;    ;;     (if (member "deleted" (notmuch-show-get-tags))
  ;;    ;;         (notmuch-show-tag (list "-deleted"))
  ;;    ;;       (notmuch-show-tag (list "+deleted")))))
#+END_SRC

* Miscellaneous
Current font:

#+BEGIN_EXAMPLE
name (opened by): -PfEd-DejaVu Sans Mono-normal-normal-normal-*-13-*-*-*-m-0-iso10646-1
       full name: DejaVu Sans Mono:pixelsize=13:foundry=PfEd:weight=normal:slant=normal:width=normal:spacing=100:scalable=true
       file name: /usr/share/fonts/truetype/dejavu/DejaVuSansMono.ttf
            size: 13
          height: 17
 baseline-offset:  0
relative-compose:  0
  default-ascent:  0
          ascent: 13
         descent:  4
   average-width:  8
     space-width:  8
       max-width:  8

#+END_EXAMPLE
* TidalCycles
<2018-05-24 Thu>
#+BEGIN_SRC emacs-lisp

(require 'haskell-mode)
(require 'tidal)
#+END_SRC
<2018-06-04 Mon>
- Start SuperCollider using scide
- Start the server using SuperDirt.start
- Start a tidal repl using C-c C-s
- Algorave!
* Playground
** Generate report
 #+BEGIN_SRC emacs-lisp
   (defun aj/generate-org-reports ()
     (interactive)
     (shell-command "~/src/org-report-processing.sh"))

 #+END_SRC

 #+RESULTS:
 : aj/generate-org-reports

** Keyboard shortcuts related to website
 <2018-11-25 Sun>
 #+BEGIN_SRC emacs-lisp
   (defun aj/update-coffee-cups ()
     (interactive)
     (shell-command "~/src/updatecups.sh"))
  ;; (global-set-key (kbd "C-c u") 'aj/update-coffee-cups)
 #+END_SRC

 #+RESULTS:
 : aj/update-coffee-cups
** When was the last time I had coffee?
 #+BEGIN_SRC emacs-lisp
   (defun aj/when-was-my-last-coffee ()
     (interactive)
     (shell-command "~/src/when-was-my-last-coffee.sh"))
  ;; (global-set-key (kbd "C-c u") 'aj/update-coffee-cups)
 #+END_SRC

 #+RESULTS:
 : aj/when-was-my-last-coffee
** Recording secrets
   [2018-12-21 Fri]
#+BEGIN_SRC emacs-lisp
  (defun aj/success-secrets ()
    (interactive)
    (shell-command "~/src/success.sh"))
  (defun aj/fail-secrets ()
    (interactive)
    (shell-command "~/src/fail.sh"))

  (defhydra aj/secrets (:color blue)
    ("s" aj/success-secrets "success")
    ("f" aj/fail-secrets "fail"))

#+END_SRC

#+RESULTS:
: aj/secrets/body
** Dired quicklinks
[2018-12-26 Wed]
#+BEGIN_SRC emacs-lisp
  (defhydra aj/dired-links (:color blue)
  "
                                      Quick Links to various directories
                                      ..................................
                                      _r_esearch      _d_ownloads      _e_macs     
                                      _m_odel         _D_ocuments      e_l_feed
  "
    ("r" (dired "~/jalihal_projects/Research/" ) "research")
    ("d" (dired "~/Downloads/" ) "downloads")
    ("D" (dired "~/Documents/" ) "documents")
    ("m" (dired "~/jalihal_projects/Research/data/ModelAnalysis/" ) "model")
    ("e" (dired "~/.emacs.d" ) "emacs config")
    ("l" (dired "~/orgs/elfeed.org" ) "elfeed config")
    ("q" nil "quit")
)

#+END_SRC

#+RESULTS:
: aj/dired-links/body

** Create Analysis
[2019-01-14 Mon]
#+begin_src emacs-lisp
  (defun aj/create-new-analysis ()
    "Prompts user for key words and creates a folder and org file using this name"
    (interactive)
    (setq analysisfolder "~/jalihal_projects/Research/Analysis/")
    (setq analysisname  (concat
                         (format-time-string "%F")
                         "-"
                         ;; This line prompts user for some keywords and replaces
                         ;; the spaces with hyphens
                         (replace-regexp-in-string "\\( \\)" "-" (read-string "Key words: "))))
  
    (make-directory (concat analysisfolder analysisname))
    (setq fpath (concat analysisfolder analysisname "/" analysisname ".org"))
    (message (concat "creating" fpath))
    (setq sessionname (read-string "Session name? [pythonsession] " nil nil "pythonsession"))
     (write-region (concat "#+PROPERTY: header-args:python :session "
                           sessionname
                           " :tangle yes :comment link \n"
                           "#+LATEX_HEADER: \\usemintedstyle{tango}%colorful\n"
                           "#+LATEX_HEADER: \\usepackage{xcolor}\n"
                           "#+LATEX_HEADER: \\definecolor{bg}{rgb}{0.9,0.9,0.9}\n"
                           "#+LATEX_HEADER: \\setminted{linenos=True,bgcolor=bg}\n"
                           "#+LATEX_HEADER: \\usepackage[bottom=0.5in,margin=1in]{geometry}\n"
                           "#+BEGIN_SRC python\n"
                           "import numpy as np\n"
                           "import matplotlib.pyplot as plt\n"
                           "import pandas as pd\n"
                           "#+END_SRC ")
                   nil fpath)
    (switch-to-buffer (find-file fpath)))
#+end_src

#+RESULTS:
: aj/create-new-analysis

** Enable devanagari mode
[2019-02-03 Sun]
#+begin_src emacs-lisp
  (load-file "~/.emacs.d/lisp/devanagari-mode.el")
#+end_src

#+RESULTS:
: t

** Hydras
 <2018-11-25 Sun>
 A wrapper around my org-mode based crutches.
 #+BEGIN_SRC emacs-lisp
   (require 'hydra)

   (defhydra aj/hydra-interface (:color blue)
   "

                                                     ^What would you like to do?^                         
                                                     ...........................                          
                                          ^Org^                ^Misc^               ^Quick Links^       ^   Personal   ^     
                                          ^---^                ^----^               ^-----------^       ^--------------^     
                                         _v_isualize brain     _m_odeline?            _C_onfig.org      _l_ast coffee        
                                         _g_enerate reports    _d_ired links          _L_abnotebook     c_u_p of coffee?     
                                         _A_nalysis            _R_eload init                          _s_ecrets            
                                                               _h_eader modeline
   
   "
     ("g" aj/generate-org-reports "generate" )
     ("u" aj/update-coffee-cups "coffee")
     ("v" org-brain-visualize "visualize")
     ("A" aj/create-new-analysis "Analyis")
     ("l" aj/when-was-my-last-coffee "last?")
     ("s" aj/secrets/body "secrets")
     ("m" hidden-mode-line-mode "modeline?")
     ("d" aj/dired-links/body "dired")
     ("C" (find-file "~/.emacs.d/config.org") "config.org")
     ("L" (find-file "~/jalihal_projects/Research/LabNoteBook.org") "labnotebook.org")
     ("h" mode-line-in-header)
     ("R" (load-file "~/.emacs.d/init.el") "reload")
     ("q" nil "quit")
     )
     (define-key global-map (kbd "C-c h") 'aj/hydra-interface/body)
     ;; h for hydra!!

 #+END_SRC

 #+RESULTS:
 : aj/hydra-interface/body

 [2018-12-14 Fri]
From [[https://cestlaz.github.io/posts/using-emacs-30-elfeed-2/]]
#+BEGIN_SRC emacs-lisp
(defhydra aj/hydra-elfeed ()
"filter"
("b" (elfeed-search-set-filter "@6-months-ago +biology") "biology")
("h" (elfeed-search-set-filter "@6-months-ago +philosophy") "philosophy")
("p" (elfeed-search-set-filter "@6-months-ago +politics") "politics")
("y" (elfeed-search-set-filter "@6-months-ago +physics") "physics")
("j" (elfeed-search-set-filter "@6-months-ago +journals") "journals")
("s" (elfeed-search-set-filter "@6-months-ago +software") "software")
("i" (elfeed-search-set-filter "@6-months-ago +indic") "indic")
("*" (elfeed-search-set-filter "@6-months-ago +star") "Starred")
("M" elfeed-toggle-star "Mark")
("A" (elfeed-search-set-filter "@6-months-ago") "All")
("T" (elfeed-search-set-filter "@1-day-ago") "Today")
("Q" bjm/elfeed-save-db-and-bury "Quit Elfeed" :color blue)
("q" nil "quit" :color blue)
)
(define-key elfeed-search-mode-map (kbd "C-c h") 'aj/hydra-elfeed/body)
#+END_SRC

#+RESULTS:
: aj/hydra-elfeed/body

