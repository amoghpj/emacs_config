* Emacs global setttings
** Theme
+As of <2018-01-07 Sun>, I am using theme-changer.el to use a light theme during the day and dark theme at night.+
+Disable theme changer by commenting out lines in the [[*Theme Changer][Theme Changer]] entry.+
Reverted
#+BEGIN_SRC emacs-lisp
  ;;(load-theme 'gruvbox t) 
  (load-theme 'sexy-monochrome t)
  ;; Modified on 2018-02-14
  ;; (load-theme 'spacemacs-dark t)
#+END_SRC
<2018-06-20 Wed>
From https://emacs.stackexchange.com/questions/3112/how-to-reset-color-theme
#+BEGIN_SRC emacs-lisp
  ;; (defadvice load-theme (before theme-dont-propagate activate)
  ;; (mapcar #'disable-theme custom-enabled-themes))

#+END_SRC

#+RESULTS:
: load-theme

** Window defaults
#+BEGIN_SRC emacs-lisp
(scroll-bar-mode 0)    ; Turn off scrollbars.
(tool-bar-mode 0)      ; Turn off toolbars.
(fringe-mode 0)        ; Turn off left and right fringe cols.
(menu-bar-mode -1)      ; Turn off menus.


(add-hook 'window-configuration-change-hook
	  (lambda ()
	    (set-window-margins (car (get-buffer-window-list (current-buffer) nil t)) 2 2 )))
#+END_SRC
** Window Transparency
#+BEGIN_SRC emacs-lisp
  ;; set transparency
  ;; (set-frame-parameter (selected-frame) 'alpha '(100 100))
  ;; (add-to-list 'default-frame-alist '(alpha 100 100))
#+END_SRC
** Color Aesthetics
#+BEGIN_SRC emacs-lisp
;; Disabled on <2018-02-28 Wed>
  ;; (set-face-background 'mode-line "#332F59")
  ;; (set-face-background 'mode-line-inactive "#8E2F59")
  ;; (set-face-background 'fringe "#343434")
#+END_SRC
** Truncate lines
#+BEGIN_SRC emacs-lisp
  (setq-default truncate-lines t)
#+END_SRC
** Display time
#+BEGIN_SRC emacs-lisp
(setq display-time-day-and-date t
 display-time-24hr-format t)
(display-time)
#+END_SRC
(setq ae-keywords:tex-mode:list 
      (list  '( comment "^\\s *\\(%.+$\\)" 'hi-pink)
      ))
(dolist (elt ae-keywords:tex-mode:list)
  (font-lock-add-keywords nil (list (list (nth 1 elt) 1 (nth 2 elt) 'append)))
  )
** Make indirect buffer 
#+BEGIN_SRC emacs-lisp
(defun narrow-to-region-indirect (start end)
  "Restrict editing in this buffer to the current region, indirectly."
  (interactive "r")
  (deactivate-mark)
  (let ((buf (clone-indirect-buffer nil nil)))
    (with-current-buffer buf
      (narrow-to-region start end))
      (switch-to-buffer buf)))
#+END_SRC
** Miscellaneous Keybindings
#+BEGIN_SRC emacs-lisp
(setq toggle-frame-fullscreen t)
(global-set-key (kbd "C-x o") 'other-window)
;;(global-set-key (kbd "C-c l") 
;;                (lambda () (interactive) (find-file "~/orgs/research/LabNoteBook.org")))
;; Other org mode mappings
(global-set-key (kbd "C-c l") 'org-store-link)
;;(define-key global-map "\C-c l" 'org-store-link)
(setq org-log-done t)

(setq org-todo-keywords
  '((sequence "TODO" "IN-PROGRESS" "WAITING" "DONE")))
#+END_SRC
** Downloaded themes
#+BEGIN_SRC elisp
  ;; (add-to-list 'custom-theme-load-path
  ;;              (file-name-as-directory "./replace-colorthemes/"))
  ;; (load-theme 'retro-orange-theme t)
  ;; (enable-theme 'retro-orange-theme)
#+END_SRC
** Backup directory
<2018-01-04 Thu>
Copied from [[http://ergoemacs.org/emacs/emacs_set_backup_into_a_directory.html][here]]
#+BEGIN_SRC emacs-lisp
;; make backup to a designated dir, mirroring the full path

(defun my-backup-file-name (fpath)
  "Return a new file path of a given file path.
If the new path's directories does not exist, create them."
  (let* (
        (backupRootDir "~/orgs/.emacs-backup/")
        (filePath (replace-regexp-in-string "[A-Za-z]:" "" fpath )) ; remove Windows driver letter in path, for example, “C:”
        (backupFilePath (replace-regexp-in-string "//" "/" (concat backupRootDir filePath "~") ))
        )
    (make-directory (file-name-directory backupFilePath) (file-name-directory backupFilePath))
    backupFilePath
  )
)

(setq make-backup-file-name-function 'my-backup-file-name)

#+END_SRC
** Clean Dired view by default
   <2018-01-07 Sun>
   Answer [[https://emacs.stackexchange.com/a/27913][from SE]]
   #+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook
      (lambda ()
        (dired-hide-details-mode)))
#+END_SRC
** Theme Changer
   <2018-01-07 Sun>
#+BEGIN_SRC emacs-lisp
  ;; (setq calendar-location-name "Blacksburg, VA") 
  ;; (setq calendar-latitude 37.2296)
  ;; (setq calendar-longitude 80.4139)
  ;; (require 'theme-changer)
  ;; (change-theme 'gruvbox-light-hard 'gruvbox)
#+END_SRC
** Show battery in modeline
<2018-02-14 Wed>
#+BEGIN_SRC emacs-lisp
(display-battery-mode 1) 
#+END_SRC
** Helm
*** Load helm
 <2018-02-25 Sun>
 #+BEGIN_SRC emacs-lisp
   (require 'helm)
(add-to-list 'load-path "~/.emacs.d/elpa/helm") ; facultative when installed with make install
(require 'helm-config)
   (global-set-key (kbd "M-x") 'helm-M-x)

   ;; ;; (global-set-key (kbd "C-x C-f") 'helm-find-files)
   (helm-mode 1)
 #+END_SRC
*** Jeff's fix for the annoying TAB completion problem
#+BEGIN_SRC emacs-lisp
  ;; modify help so tab is autocomplete
  ;; (define-key helm-map (kbd "TAB") #'helm-execute-persistent-action)
  ;; (define-key helm-map (kbd "<tab>") #'helm-execute-persistent-action)
  ;; (define-key helm-map (kbd "C-z") #'helm-select-action)
#+END_SRC
*** Helm-swoop configurations
<2018-02-25 Sun>
#+BEGIN_SRC emacs-lisp
(require 'helm-swoop)
(global-set-key (kbd "M-i") 'helm-swoop)
(define-key helm-swoop-map (kbd "C-r") 'helm-previous-line)
(define-key helm-swoop-map (kbd "C-s") 'helm-next-line)
#+END_SRC
*** Reconfiguring helm-bibtex
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path
              "~/.emacs.d/elpa/helm-bibtex")
(autoload 'helm-bibtex "helm-bibtex" "" t)
#+END_SRC
** Abbrev
<2018-02-25 Sun>
#+BEGIN_SRC emacs-lisp
  ;; (load "~/.emacs.d/lisp/aj-abbrev.el")   
#+END_SRC
** Visual Regexp
<2018-02-25 Sun>
#+BEGIN_SRC emacs-lisp
(require 'visual-regexp)
(define-key global-map (kbd "C-c r") 'vr/replace)
(define-key global-map (kbd "C-c q") 'vr/query-replace)
#+END_SRC
** YASnippet
<2018-04-05 Thu>
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path
              "~/.emacs.d/plugins/yasnippet")
(require 'yasnippet)
(setq yas-snippet-dirs
      '("~/.emacs.d/snippets"                 ;; personal snippets
        ))
(yas-global-mode 1)
#+END_SRC

#+RESULTS:
: t

** Company
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'global-company-mode)
  ;; (add-to-list 'company-backends 'company-ob-ipython) ;
#+END_SRC
** Annoying C-z
<2018-04-27 Fri>
Found it [[https://superuser.com/a/349997][on stackexhange]]
#+BEGIN_SRC emacs-lisp
(global-unset-key (kbd "C-z"))
#+END_SRC
** Fonts
#+BEGIN_SRC emacs-lisp
  ;; (when (window-system)
  ;;   (set-frame-font "Fira Code"))
  ;; (let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
  ;;                (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
  ;;                (36 . ".\\(?:>\\)")
  ;;                (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
  ;;                (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
  ;;                (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
  ;;                (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
  ;;                (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
  ;;                (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
  ;;                (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
  ;;                (48 . ".\\(?:x[a-zA-Z]\\)")
  ;;                (58 . ".\\(?:::\\|[:=]\\)")
  ;;                (59 . ".\\(?:;;\\|;\\)")
  ;;                (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
  ;;                (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
  ;;                (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
  ;;                (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
  ;;                (91 . ".\\(?:]\\)")
  ;;                (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
  ;;                (94 . ".\\(?:=\\)")
  ;;                (119 . ".\\(?:ww\\)")
  ;;                (123 . ".\\(?:-\\)")
  ;;                (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
  ;;                (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
  ;;                )
  ;;              ))
  ;;   (dolist (char-regexp alist)
  ;;     (set-char-table-range composition-function-table (car char-regexp)
  ;;                           `([,(cdr char-regexp) 0 font-shape-gstring]))))



  ;; ;;; Fira code
  ;; ;; This works when using emacs --daemon + emacsclient
  ;; (add-hook 'after-make-frame-functions (lambda (frame) (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")))
  ;; ;; This works when using emacs without server/client
  ;; (set-fontset-font t '(#Xe100 . #Xe16f) "Fira Code Symbol")
  ;; ;; I haven't found one statement that makes both of the above situations work, so I use both for now

  ;; (defconst fira-code-font-lock-keywords-alist
  ;;   (mapcar (lambda (regex-char-pair)
  ;;             `(,(car regex-char-pair)
  ;;               (0 (prog1 ()
  ;;                    (compose-region (match-beginning 1)
  ;;                                    (match-end 1)
  ;;                                    ;; The first argument to concat is a string containing a literal tab
  ;;                                    ,(concat "	" (list (decode-char 'ucs (cadr regex-char-pair)))))))))
  ;;           '(("\\(www\\)"                   #Xe100)
  ;;             ("[^/]\\(\\*\\*\\)[^/]"        #Xe101)
  ;;             ("\\(\\*\\*\\*\\)"             #Xe102)
  ;;             ("\\(\\*\\*/\\)"               #Xe103)
  ;;             ("\\(\\*>\\)"                  #Xe104)
  ;;             ("[^*]\\(\\*/\\)"              #Xe105)
  ;;             ("\\(\\\\\\\\\\)"              #Xe106)
  ;;             ("\\(\\\\\\\\\\\\\\)"          #Xe107)
  ;;             ("\\({-\\)"                    #Xe108)
  ;;             ("\\(\\[\\]\\)"                #Xe109)
  ;;             ("\\(::\\)"                    #Xe10a)
  ;;             ("\\(:::\\)"                   #Xe10b)
  ;;             ("[^=]\\(:=\\)"                #Xe10c)
  ;;             ("\\(!!\\)"                    #Xe10d)
  ;;             ("\\(!=\\)"                    #Xe10e)
  ;;             ("\\(!==\\)"                   #Xe10f)
  ;;             ("\\(-}\\)"                    #Xe110)
  ;;             ("\\(--\\)"                    #Xe111)
  ;;             ("\\(---\\)"                   #Xe112)
  ;;             ("\\(-->\\)"                   #Xe113)
  ;;             ("[^-]\\(->\\)"                #Xe114)
  ;;             ("\\(->>\\)"                   #Xe115)
  ;;             ("\\(-<\\)"                    #Xe116)
  ;;             ("\\(-<<\\)"                   #Xe117)
  ;;             ("\\(-~\\)"                    #Xe118)
  ;;             ("\\(#{\\)"                    #Xe119)
  ;;             ("\\(#\\[\\)"                  #Xe11a)
  ;;             ("\\(##\\)"                    #Xe11b)
  ;;             ("\\(###\\)"                   #Xe11c)
  ;;             ("\\(####\\)"                  #Xe11d)
  ;;             ("\\(#(\\)"                    #Xe11e)
  ;;             ("\\(#\\?\\)"                  #Xe11f)
  ;;             ("\\(#_\\)"                    #Xe120)
  ;;             ("\\(#_(\\)"                   #Xe121)
  ;;             ("\\(\\.-\\)"                  #Xe122)
  ;;             ("\\(\\.=\\)"                  #Xe123)
  ;;             ("\\(\\.\\.\\)"                #Xe124)
  ;;             ("\\(\\.\\.<\\)"               #Xe125)
  ;;             ("\\(\\.\\.\\.\\)"             #Xe126)
  ;;             ("\\(\\?=\\)"                  #Xe127)
  ;;             ("\\(\\?\\?\\)"                #Xe128)
  ;;             ("\\(;;\\)"                    #Xe129)
  ;;             ("\\(/\\*\\)"                  #Xe12a)
  ;;             ("\\(/\\*\\*\\)"               #Xe12b)
  ;;             ("\\(/=\\)"                    #Xe12c)
  ;;             ("\\(/==\\)"                   #Xe12d)
  ;;             ("\\(/>\\)"                    #Xe12e)
  ;;             ("\\(//\\)"                    #Xe12f)
  ;;             ("\\(///\\)"                   #Xe130)
  ;;             ("\\(&&\\)"                    #Xe131)
  ;;             ("\\(||\\)"                    #Xe132)
  ;;             ("\\(||=\\)"                   #Xe133)
  ;;             ("[^|]\\(|=\\)"                #Xe134)
  ;;             ("\\(|>\\)"                    #Xe135)
  ;;             ("\\(\\^=\\)"                  #Xe136)
  ;;             ("\\(\\$>\\)"                  #Xe137)
  ;;             ("\\(\\+\\+\\)"                #Xe138)
  ;;             ("\\(\\+\\+\\+\\)"             #Xe139)
  ;;             ("\\(\\+>\\)"                  #Xe13a)
  ;;             ("\\(=:=\\)"                   #Xe13b)
  ;;             ("[^!/]\\(==\\)[^>]"           #Xe13c)
  ;;             ("\\(===\\)"                   #Xe13d)
  ;;             ("\\(==>\\)"                   #Xe13e)
  ;;             ("[^=]\\(=>\\)"                #Xe13f)
  ;;             ("\\(=>>\\)"                   #Xe140)
  ;;             ("\\(<=\\)"                    #Xe141)
  ;;             ("\\(=<<\\)"                   #Xe142)
  ;;             ("\\(=/=\\)"                   #Xe143)
  ;;             ("\\(>-\\)"                    #Xe144)
  ;;             ("\\(>=\\)"                    #Xe145)
  ;;             ("\\(>=>\\)"                   #Xe146)
  ;;             ("[^-=]\\(>>\\)"               #Xe147)
  ;;             ("\\(>>-\\)"                   #Xe148)
  ;;             ("\\(>>=\\)"                   #Xe149)
  ;;             ("\\(>>>\\)"                   #Xe14a)
  ;;             ("\\(<\\*\\)"                  #Xe14b)
  ;;             ("\\(<\\*>\\)"                 #Xe14c)
  ;;             ("\\(<|\\)"                    #Xe14d)
  ;;             ("\\(<|>\\)"                   #Xe14e)
  ;;             ("\\(<\\$\\)"                  #Xe14f)
  ;;             ("\\(<\\$>\\)"                 #Xe150)
  ;;             ("\\(<!--\\)"                  #Xe151)
  ;;             ("\\(<-\\)"                    #Xe152)
  ;;             ("\\(<--\\)"                   #Xe153)
  ;;             ("\\(<->\\)"                   #Xe154)
  ;;             ("\\(<\\+\\)"                  #Xe155)
  ;;             ("\\(<\\+>\\)"                 #Xe156)
  ;;             ("\\(<=\\)"                    #Xe157)
  ;;             ("\\(<==\\)"                   #Xe158)
  ;;             ("\\(<=>\\)"                   #Xe159)
  ;;             ("\\(<=<\\)"                   #Xe15a)
  ;;             ("\\(<>\\)"                    #Xe15b)
  ;;             ("[^-=]\\(<<\\)"               #Xe15c)
  ;;             ("\\(<<-\\)"                   #Xe15d)
  ;;             ("\\(<<=\\)"                   #Xe15e)
  ;;             ("\\(<<<\\)"                   #Xe15f)
  ;;             ("\\(<~\\)"                    #Xe160)
  ;;             ("\\(<~~\\)"                   #Xe161)
  ;;             ("\\(</\\)"                    #Xe162)
  ;;             ("\\(</>\\)"                   #Xe163)
  ;;             ("\\(~@\\)"                    #Xe164)
  ;;             ("\\(~-\\)"                    #Xe165)
  ;;             ("\\(~=\\)"                    #Xe166)
  ;;             ("\\(~>\\)"                    #Xe167)
  ;;             ("[^<]\\(~~\\)"                #Xe168)
  ;;             ("\\(~~>\\)"                   #Xe169)
  ;;             ("\\(%%\\)"                    #Xe16a)
  ;;             ;;("\\(x\\)"                     #Xe16b)
  ;;             ("[^:=]\\(:\\)[^:=]"           #Xe16c)
  ;;             ("[^\\+<>]\\(\\+\\)[^\\+<>]"   #Xe16d)
  ;;             ("[^\\*/<>]\\(\\*\\)[^\\*/<>]" #Xe16f))))

  ;; (defun add-fira-code-symbol-keywords ()
  ;;   (font-lock-add-keywords nil fira-code-font-lock-keywords-alist))

  ;; (add-hook 'prog-mode-hook
  ;;           #'add-fira-code-symbol-keywords)

      ;; (set-face-font 'default "-CYEL-Iosevka-normal-normal-normal-*-16-*-*-*-d-0-iso10646-1")
      ;; (add-to-list 'load-path
      ;;              "~/.emacs.d/lisp/")
      ;; (load "~/.emacs.d/lisp/symbols.el")
#+END_SRC
** Rectangular select regep operations
   <2018-05-10 Thu>
Copied from [[https://stackoverflow.com/questions/11130546/search-and-replace-inside-a-rectangle-in-emacs][this Stackoverflow answer]]
#+BEGIN_SRC emacs-lisp
(require 'rect)

(defun my-search-replace-in-rectangle
  (start end search-pattern replacement search-function literal)
  "Replace all instances of SEARCH-PATTERN (as found by SEARCH-FUNCTION)
with REPLACEMENT, in each line of the rectangle established by the START
and END buffer positions.

SEARCH-FUNCTION should take the same BOUND and NOERROR arguments as
`search-forward' and `re-search-forward'.

The LITERAL argument is passed to `replace-match' during replacement.

If `case-replace' is nil, do not alter case of replacement text."
  (apply-on-rectangle
   (lambda (start-col end-col search-function search-pattern replacement)
     (move-to-column start-col)
     (let ((bound (min (+ (point) (- end-col start-col))
                       (line-end-position)))
           (fixedcase (not case-replace)))
       (while (funcall search-function search-pattern bound t)
         (replace-match replacement fixedcase literal))))
   start end search-function search-pattern replacement))

(defun my-replace-regexp-rectangle-read-args (regexp-flag)
  "Interactively read arguments for `my-replace-regexp-rectangle'
or `my-replace-string-rectangle' (depending upon REGEXP-FLAG)."
  (let ((args (query-replace-read-args
               (concat "Replace"
                       (if current-prefix-arg " word" "")
                       (if regexp-flag " regexp" " string"))
               regexp-flag)))
    (list (region-beginning) (region-end)
          (nth 0 args) (nth 1 args) (nth 2 args))))

(defun my-replace-regexp-rectangle
  (start end regexp to-string &optional delimited)
  "Perform a regexp search and replace on each line of a rectangle
established by START and END (interactively, the marked region),
similar to `replace-regexp'.

Optional arg DELIMITED (prefix arg if interactive), if non-nil, means
replace only matches surrounded by word boundaries.

If `case-replace' is nil, do not alter case of replacement text."
  (interactive (my-replace-regexp-rectangle-read-args t))
  (when delimited
    (setq regexp (concat "\\b" regexp "\\b")))
  (my-search-replace-in-rectangle
   start end regexp to-string 're-search-forward nil))

(defun my-replace-string-rectangle
  (start end from-string to-string &optional delimited)
  "Perform a string search and replace on each line of a rectangle
established by START and END (interactively, the marked region),
similar to `replace-string'.

Optional arg DELIMITED (prefix arg if interactive), if non-nil, means
replace only matches surrounded by word boundaries.

If `case-replace' is nil, do not alter case of replacement text."
  (interactive (my-replace-regexp-rectangle-read-args nil))
  (let ((search-function 'search-forward))
    (when delimited
      (setq search-function 're-search-forward
            from-string (concat "\\b" (regexp-quote from-string) "\\b")))
    (my-search-replace-in-rectangle
     start end from-string to-string search-function t)))

(global-set-key (kbd "C-x r M-%") 'my-replace-string-rectangle)
(global-set-key (kbd "C-x r C-M-%") 'my-replace-regexp-rectangle)
#+END_SRC
** Auto fill mode
<2018-06-08 Fri>
Set autofill mode by default for all major modes
#+BEGIN_SRC emacs-lisp
;; This becomes annoying in shell and org buffers
;;(setq-default auto-fill-function 'do-autoill)
#+END_SRC
** Auto reload files
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC
** Auto reload files
#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC
** My macros
#+BEGIN_SRC emacs-lisp
(fset 'mydb
   [?\C-x ?1 ?\C-x ?3 ?\C-x ?\C-f ?~ ?/ ?. ?e ?m tab ?. tab ?s ?t ?a ?r tab ?. ?o tab return ?\C-c ?a ?  ?\C-x ?- ?\C-x ?\C-- ?\C-x ?o ?\C-x ?2 ?\C-x ?\C-b])
(global-set-key (kbd "C-c d") 'mydb)
#+END_SRC
** Dired listing chronological instead of alphabetical
#+BEGIN_SRC emacs-lisp
(setq dired-listing-switches "-lt")

#+END_SRC

#+RESULTS:
: -lt

* Python
** Setting to use shell arguments?
#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Python setup to use the shell python variable for emacs, so uses conda
(defun set-exec-path-from-shell-PATH ()
  (interactive)
  (let ((path-from-shell (replace-regexp-in-string "^.*\n.*shell\n" "" (shell-command-to-string "$SHELL --login -i -\
c 'echo $PATH'"))))
  (setenv "PATH" path-from-shell)                                                                                    
(setq exec-path (split-string path-from-shell path-separator))))
(set-exec-path-from-shell-PATH)  
#+END_SRC

** Elpy 
<2018-03-17 Sat>
#+BEGIN_SRC emacs-lisp
  ;; (elpy-enable)
  (setq-default indent-tabs-mode nil)
#+END_SRC
** Virtual environments
#+begin_src emacs-lisp
(require 'virtualenvwrapper)
(venv-initialize-interactive-shells) ;; if you want interactive shell support
;;(venv-initialize-eshell) ;; if you want eshell support
;; note that setting `venv-location` is not necessary if you
;; use the default location (`~/.virtualenvs`), or if the
;; the environment variable `WORKON_HOME` points to the right place
(setq venv-location "~/jalihal_projects/Research/data/ModelAnalysis/nutsig")
(venv-workon "local")
#+end_src

#+RESULTS:

To activate the venv, type =M-x venv-workon= and select a venv

To deactivate, type =M-x venv-deactivate=
* Org-mode
** Enable org-mode
#+BEGIN_SRC emacs-lisp
;;;;org-mode configuration
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)
(require 'org)
(define-key global-map "\C-ca" 'org-agenda)
#+END_SRC
** Setting timestamp when TODO state changes to DONE
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
#+END_SRC   
** Open PDFs in evince
#+BEGIN_SRC emacs-lisp
;; PDFs visited in Org-mode are opened in Evince (and not in the default choice) http://stackoverflow.com/a/8836108/789593
(add-hook 'org-mode-hook
      '(lambda ()
         (delete '("\\.pdf\\'" . default) org-file-apps)
         (add-to-list 'org-file-apps '("\\.pdf\\'" . "evince %s"))))
#+END_SRC
** Org-Babel setup

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
`org-babel-load-languages
 `((dot . t)
 (shell . t)
 (python . t)
 (ditaa . t)
 (latex . t)
 (R . t)
;;(julia . t)
(screen . t)
))

 (setq org-confirm-babel-evaluate nil)   ;don't prompt me to confirm everytime I want to evaluate a block
   ;; ;;; display/update images in the buffer after I evaluate
 (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)

#+END_SRC

#+RESULTS:
| org-display-inline-images |
[2019-01-08 Tue]
Async
#+begin_src emacs-lisp
(require 'ob-async)
#+end_src

#+RESULTS:
: ob-async

** Org-capture
*** Setup
#+BEGIN_SRC emacs-lisp
;; Org-capture setup
(define-key global-map "\C-cc" 'org-capture)
#+END_SRC
** Capture Templates
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        '(
          ("t" "Tasks")
          ("tw" "(work) Task/Idea" entry (file+headline "~/jalihal_projects/Research/LabNoteBook.org" "Tasks")
           "** TODO %?  %^g
    :PROPERTIES:
    :BLOCKER:
    :TRIGGER:
    :END:\n%u" )

          ("e" "Entry")
          ("ep" "presentation" entry (file+olp "~/jalihal_projects/Research/LabNoteBook.org" "Presentations")
           "** Meeting on %U
  ,#+BIND: org-export-use-babel nil
  ,#+STARTUP: beamer
  ,#+OPTIONS: H:1 toc:nil
  ,#+AUTHOR: Amogh Jalihal
  ,#+TITLE: Meeting on %U
  ,#+EXPORT_FILE_NAME: 
  ,#+LATEX_HEADER: \\usetheme{metropolis}
  %?" :prepend t :empty-lines 1)
          ("em" "meeting" entry (file+olp "~/jalihal_projects/Research/LabNoteBook.org" "Meeting Notes")
           "** Meeting on %U
  - %?" :prepend t :empty-lines 1)        
          ("el" "labnotebook" entry (file+datetree "~/jalihal_projects/Research/LabNoteBook.org")
           "* %?
  %U")        

        
          ;;("e" "Event" entry (file+datetree "~/orgs/diary.org")
          ;;"* IN-PROGRESS EVENT with %? :MEETING:\n%t" :clock-in t :clock-resume t)
          ("cp" "personal" entry (file+datetree "~/orgs/diary.org")
           "* %?\n%U\n" :clock-in t :clock-resume t)
          ("s" "Social" entry (file+olp "~/public_html/social.org" "Social")
           "* \n
    ,#+BEGIN_EXPORT html
    <div class=\"container\">
    ,#+END_EXPORT\n
    %U\n\n%?\n
    ,#+BEGIN_EXPORT html
    </div>
    ,#+END_EXPORT" :prepend t :empty-lines 1)
          ))
  ;; Allow creation of new parent nodes
  (setq org-refile-allow-creating-parent-nodes `confirm)
  ;; Look up to three levels deep
  (setq org-refile-targets '((org-agenda-files :maxlevel . 4)))
#+END_SRC

#+RESULTS:
: ((org-agenda-files :maxlevel . 4))

*** Capture from browser
#+BEGIN_SRC emacs-lisp
;; Commented the following 4 lines because I don't use them anymore
;; (server-start)
;; (require 'org-protocol) 
;; (add-to-list 'load-path "~/.emacs.d/org-protocol-capture-html/")
;; (require 'org-protocol-capture-html)
;; SOURCE: http://cachestocaches.com/2016/9/my-workflow-org-agenda/
#+END_SRC
** Org-Agenda
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-custom-commands
        ;; The " " here is the shortcut for this agenda, so `C-c a SPC`
        '((" " "Agenda"
           ((agenda "" nil)
            ;; All headings with the "cs6824" tag

            (tags-todo "paper"
                       ((org-agenda-overriding-header "Paper")))
            (tags-todo "presentation"
                       ((org-agenda-overriding-header "Presentations")))

            (tags-todo "NutSig"
                       ((org-agenda-overriding-header "Model building")))
            (tags-todo "scripting"
                       ((org-agenda-overriding-header "Scripting")))

            (tags-todo "literature"
                       ((org-agenda-overriding-header "Literature")))
            (tags-todo "personal"
                       ((org-agenda-overriding-header "All personal tasks")))
                       
            (tags-todo "work"
                       ((org-agenda-overriding-header "All Research")))
            ;; (tags-todo ""
            ;;            ((org-agenda-overriding-header "Seminar Organization Tasks")))
            ;; (tags-todo "personal"
            ;;            ((org-agenda-overriding-header "Personal Tasks")))
            (todo "TODO"
                  ((org-agenda-overriding-header "Task list")
                   ;; sort by time, priority, and category
                   (org-agenda-sorting-strategy
                    '(time-up priority-down effort-up)))) ;; category-keepx
            ;; Everything on hold
            ;; All "WAITING" items
            (todo "WAITING"
                  ((org-agenda-overriding-header "Future Tasks")))
            )
           )))
#+END_SRC
** Inline Image setting for Org-mode
#+BEGIN_SRC emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Targets include this file and any file contributing to the agenda - up to 5 levels deep
(setq org-image-actual-width nil)
(setq org-toggle-inline-images t)
#+END_SRC
<2018-10-26 Fri>
Refresh inline display
#+BEGIN_SRC elisp
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
#+END_SRC

#+RESULTS:
| org-display-inline-images |

** Org-git-link
#+BEGIN_SRC emacs-lisp
(load-file "~/.emacs.d/org-git-link.el")
#+END_SRC
** Org-ref
#+BEGIN_SRC emacs-lisp
    (add-to-list 'load-path "~/.emacs.d/org-ref/") 
    (setq reftex-default-bibliography '("~/jalihal_projects/Research/references.bib"))

    (setq org-ref-bibliography-notes "~/jalihal_projects/Research/notes.org"
          org-ref-default-bibliography '("~/jalihal_projects/Research/references.bib")
    ;;      org-ref-default-bibliography '("~/Unison/YeastNutBib.bib")
          org-ref-pdf-directory "~/jalihal_projects/bibtex-pdfs/")
;;(setq bibtex-autokey-edit-before-use t)
  (require 'org-ref)
#+END_SRC

#+RESULTS:
: org-ref

*** Some shortcuts
**** Crossref-add-bib-entry
<2018-01-16 Tue>
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c b") 'crossref-add-bibtex-entry)
  (global-set-key (kbd "C-c ]") 'org-ref-helm-insert-cite-link)
#+END_SRC

#+RESULTS:
: org-ref-helm-insert-cite-link

*** Customizing bibkeys
<2018-11-30 Fri>
#+BEGIN_SRC elisp
  ;;     (setq bibtex-autokey-year-length 4
  ;;           bibtex-autokey-name-year-separator "_"
  ;;           bibtex-autokey-year-title-separator "_"
  ;;           bibtex-autokey-titlewords 3
  ;;           bibtex-autokey-titlewords-length 20
  ;;           bibtex-autokey-name-case-convert-function 'capitalize
  ;;           )
  ;; (defun bibtex-autokey-get-journal ()

  ;;   (let ((myjournal (bibtex-autokey-get-field "journal")))
  ;;     ))

  ;;   (defun bibtex-generate-autokey ()

  ;;     (let* ((names (bibtex-autokey-get-names))
  ;;            (year (bibtex-autokey-get-year))
  ;;            (title (bibtex-autokey-get-title))
  ;;            (myjournal (bibtex-autokey-get-journal))
  ;;            ;; (autokey (concat bibtex-autokey-prefix-string
  ;;            ;;                  names
  ;;            ;;                  (unless (or (equal names "")
  ;;            ;;                              (equal year ""))
  ;;            ;;                    bibtex-autokey-name-year-separator)
  ;;            ;;                  year
  ;;            ;;                  (unless (or (and (equal names "")
  ;;            ;;                                   (equal year ""))
  ;;            ;;                              (equal title ""))
  ;;            ;;                    bibtex-autokey-year-title-separator)
  ;;            ;;                  title)))
  ;;            (autokey (concat bibtex-autokey-prefix-string
  ;;                             year "-" myjournal "-" names "-" title)))

  ;;       (if bibtex-autokey-before-presentation-function
  ;;           (funcall bibtex-autokey-before-presentation-function autokey)
  ;;         autokey)))

#+END_SRC

#+RESULTS:
: bibtex-generate-autokey

*** Adding journal abbreviations
#+begin_src emacs-lisp
(add-to-list 'org-ref-bibtex-journal-abbreviations
  '("FEMS" "FEMS Yeast Research" "FEMS. Yeast. Res"))
#+end_src

#+RESULTS:
| FEMS     | FEMS Yeast Research                                                             | FEMS. Yeast. Res                |
| ACR      | Accounts of Chemical Research                                                   | Acc. Chem. Res.                 |
| ACAT     | ACS Catalysis                                                                   | ACS Catal.                      |
| AM       | Acta Materialia                                                                 | Acta Mater.                     |
| AMM      | Acta Metallurgica et Materialia                                                 | Acta Metall. Mater.             |
| AEM      | Advanced Energy Materials                                                       | Adv. Energy Mater.              |
| AAMI     | ACS Applied Materials \& Interfaces                                             | ACS Appl. Mater. Interfaces     |
| AMiner   | American Mineralogist                                                           | Am. Mineral.                    |
| AngC     | Angewandte Chemie-International Edition                                         | Angew. Chem. Int. Edit.         |
| APLM     | APL Materials                                                                   | APL Mat.                        |
| ACBE     | Applied Catalysis B: Environmental                                              | Appl. Catal. B-Environ.         |
| APL      | Applied Physics Letters                                                         | Appl. Phys. Lett.               |
| ASS      | Applied Surface Science                                                         | Appl. Surf. Sci.                |
| CL       | Catalysis Letters                                                               | Catal. Lett.                    |
| CC       | Catalysis Communications                                                        | Catal. Commun.                  |
| CST      | Catalysis Science & Technology                                                  | Catal. Sci. Technol.            |
| CT       | Catalysis Today                                                                 | Catal. Today                    |
| ChC      | Chemical Communications                                                         | Chem. Commun.                   |
| CPL      | Chemical Physics Letters                                                        | Chem. Phys. Lett                |
| CR       | Chemical Reviews                                                                | Chem. Rev.                      |
| CSR      | Chemical Society Reviews                                                        | Chem. Soc. Rev.                 |
| CSR      | Chemical Society Reviews                                                        | Chem. Soc. Rev.                 |
| CM       | Chemistry of Materials                                                          | Chem. Mater.                    |
| CSA      | Colloids and Surfaces, A: Physicochemical and Engineering Aspects               | Colloids Surf., A               |
| CF       | Combustion and Flame                                                            | Combust. Flame                  |
| CPMS     | Computational Materials Science                                                 | Comp. Mater. Sci.               |
| CPC      | Computer Physics Communications                                                 | Comput. Phys. Commun.           |
| CSE      | Computing in Science \& Engineering                                             | Comput. Sci. Eng.               |
| CGD      | Crystal Growth \& Design                                                        | Cryst. Growth Des.              |
| CEC      | CrystEngComm                                                                    | CrystEngComm                    |
| EA       | Electrochimica Acta                                                             | Electrochim. Acta               |
| ECST     | ECS Transactions                                                                | ECS Trans.                      |
| EES      | Energy \& Environmental Science                                                 | Energy Environ. Sci.            |
| HPR      | High Pressure Research                                                          | High Pressure Res.              |
| IC       | Inorganic Chemistry                                                             | Inorg. Chem.                    |
| IECR     | Industrial \& Engineering Chemistry Research                                    | Ind. Eng. Chem. Res.            |
| JJAP     | Japanese Journal of Applied Physics                                             | Jpn. J. Appl. Phys.             |
| JMatR    | Journal of  Materials Research                                                  | J. Mater. Res.                  |
| JALC     | Journal of Alloys and Compounds                                                 | J. Alloy Compd.                 |
| JAC      | Journal of Applied Crystallography                                              | J. Appl. Crystallogr.           |
| JAE      | Journal of Applied Electrochemistry                                             | J. Appl. Electrochem.           |
| JAP      | Journal of Applied Physics                                                      | J. Appl. Phys.                  |
| JC       | Journal of Catalysis                                                            | J. Catal.                       |
| JCP      | Journal of Chemical Physics                                                     | J. Chem. Phys.                  |
| JCC      | Journal of Computational Chemistry                                              | J. Comput. Chem.                |
| JCG      | Journal of Crystal Growth                                                       | J. Crys. Growth                 |
| JMC      | Journal of Materials Chemistry                                                  | J. Mater. Chem.                 |
| JMC      | Journal of Materials Chemistry                                                  | J. Mater. Chem.                 |
| JMSL     | Journal of Materials Science Letters                                            | J. Mater. Sci. Lett.            |
| JMS      | Journal of Membrane Science                                                     | J. Memb. Sci.                   |
| JPE      | Journal of Phase Equilibria                                                     | J. Phase Equilib.               |
| JPCS     | Journal of Physics and Chemistry of Solids                                      | J. Phys. Chem. Solids           |
| JPCM     | Journal of Physics: Condensed Matter                                            | J. Phys.: Condens. Matter       |
| JPS      | Journal of Power Sources                                                        | J. Power Sources                |
| JSSC     | Journal of Solid State Chemistry                                                | J. Solid State Chem.            |
| JACerS   | Journal of the American Ceramic Society                                         | J. Am. Ceram. Soc.              |
| JACS     | Journal of the American Chemical Society                                        | J. Am. Chem. Soc.               |
| JASIST   | Journal of the American Society for Information Science and Technology          | J. Am. Soc. Inf. Sci. Technol.  |
| JES      | Journal of The Electrochemical Society                                          | J. Electrochem. Soc.            |
| JEaC     | Journal of Electroanalytical Chemistry                                          | J. Electroanal. Chem.           |
| JMS      | Journal of Membrane Science                                                     | J. Memb. Sci.                   |
| JRS      | Journal of Raman Spectroscopy                                                   | J. Raman Spectrosc.             |
| JVST     | Journal of Vacuum Science \& Technology A                                       | J. Vac. Sci. Technol. A         |
| ML       | Materials Letters                                                               | Mater. Lett.                    |
| MSE-BS   | Materials Science and Engineering B                                             | Mat. Sci. Eng. B-Solid          |
| MOLSIM   | Molecular Simulation                                                            | Mol. Sim.                       |
| Nature   | Nature                                                                          | Nature                          |
| NM       | Nature Materials                                                                | Nat. Mater.                     |
| NC       | Nature Chemistry                                                                | Nat. Chem.                      |
| PML      | Philosophical Magazine Letters                                                  | Phil. Mag. Lett.                |
| PMA      | Philosophical Magazine A                                                        | Phil. Mag. A                    |
| PA       | Physica A: Statistical Mechanics and its Applications                           | Physica A                       |
| PB       | Physica B-Condensed Matter                                                      | Physica B                       |
| PCCP     | Physical Chemistry Chemical Physics                                             | Phys. Chem. Chem. Phys.         |
| PSSB     | physica status solidi (b)                                                       | Phys. Status Solidi B           |
| PRA      | Physical Review A                                                               | Phys. Rev. A                    |
| PRB      | Physical Review B                                                               | Phys. Rev. B                    |
| PRL      | Physical Review Letters                                                         | Phys. Rev. Lett.                |
| PCM      | Physics and Chemistry of Minerals                                               | Phys. Chem. Miner.              |
| PNAS     | Proceedings of the National Academy of Sciences of the United States of America | Proc. Natl. Acad. Sci. U. S. A. |
| PSurfSci | Progress in Surface Science                                                     | Prog. Surf. Sci.                |
| Science  | Science                                                                         | Science                         |
| SM       | Scripta Materialia                                                              | Scr. Mater.                     |
| SABC     | Sensors and Actuators B: Chemical                                               | Sensor. Actuat. B-Chem.         |
| SS       | Surface Science                                                                 | Surf. Sci.                      |
| EPJB     | The European Physical Journal B                                                 | Eur. Phys. J. B                 |
| JPC      | The Journal of Physical Chemistry                                               | J. Phys. Chem.                  |
| JPCB     | The Journal of Physical Chemistry B                                             | J. Phys. Chem. B                |
| JPCC     | The Journal of Physical Chemistry C                                             | J. Phys. Chem. C                |
| JPCL     | The Journal of Physical Chemistry Letters                                       | J. Phys. Chem. Lett.            |
| JCP      | The Journal of Chemical Physics                                                 | J. Chem. Phys.                  |
| MSMSE    | Modelling and Simulation in Materials Science and Engineering                   | Modell. Simul. Mater. Sci. Eng. |
| TSF      | Thin Solid Films                                                                | Thin Solid Films                |
| TC       | Topics in Catalysis                                                             | Top. Catal.                     |
| WR       | Water Research                                                                  | Water Res.                      |

** Comment blocks in Org-mode
#+BEGIN_SRC emacs-lisp
;;(add-to-list 'org-structure-template-alist '("C" "#+begin_comment\n?\n#+end_comment"))
#+END_SRC
** Org-Edna
#+BEGIN_SRC emacs-lisp
(org-edna-load)
#+END_SRC
** Org-Notify
#+BEGIN_SRC emacs-lisp
 (add-to-list 'load-path "~/.emacs.d/elpa/")
 (require 'org-notify)
;; (org-notify)
#+END_SRC

#+RESULTS:
: org-notify

** Effort Estimates and agenda options
<2018-01-04 Thu>
#+BEGIN_SRC emacs-lisp
(setq org-global-properties
    '(("Effort_ALL". "0 0:10 0:30 1:00 2:00 3:00 4:00 8:00")))
#+END_SRC   
** Org-dashboard
<2018-01-06 Sat>
- Configured to stop displaying completed projects
#+BEGIN_SRC emacs-lisp
   (defun my/org-dashboard-filter (entry)
     (and ;;(> (plist-get entry :progress-percent) 0)
          (< (plist-get entry :progress-percent) 100)
          (not (member "archive" (plist-get entry :tags)))))

   (setq org-dashboard-filter 'my/org-dashboard-filter)

#+END_SRC
** Org-bullets
<2018-01-07 Sun>
#+BEGIN_SRC emacs-lisp
  ;; (require 'org-bullets)
  ;; (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+END_SRC
** Org clock
*** Custom Shortcuts
<2018-01-17 Wed>
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c j") 'org-clock-jump-to-current-clock)
#+END_SRC
** Inline latex highlighting
<2018-02-14 Wed>
#+BEGIN_SRC emacs-lisp
(setq org-highlight-latex-and-related '(latex))
#+END_SRC
** Larger inline latex
#+BEGIN_SRC emacs-lisp
(plist-put org-format-latex-options :scale 1.5)
#+END_SRC
** Org-advance
#+BEGIN_SRC emacs-lisp
(defun org-advance ()
  (interactive)
  (when (buffer-narrowed-p)
  (beginning-of-buffer)
  (widen)
  (org-forward-heading-same-level 1))
    (org-narrow-to-subtree))
(global-set-key (kbd "C-x n f") 'org-advance)
(defun org-retreat ()
  (interactive)
  (when (buffer-narrowed-p)
    (beginning-of-buffer)
    (widen)
   (org-backward-heading-same-level 1))
   (org-narrow-to-subtree))
(global-set-key (kbd "C-x n k") 'org-retreat)
#+END_SRC
** Ox-latex
#+BEGIN_SRC emacs-lisp
(require 'ox-latex)
;;(setq org-latex-listings 'minted)
;;(add-to-list 'org-latex-minted-langs '(ipython "python"))
#+END_SRC
[2019-01-03 Thu]
From John Kitchin’s blog
#+begin_src emacs-lisp
  (org-add-link-type
   "comment"
   (lambda (linkstring)
     (let ((elm (org-element-context))
           (use-dialog-box nil))
       (when (y-or-n-p "Delete comment? ")
         (setf (buffer-substring
                (org-element-property :begin elm)
                (org-element-property :end elm))
               (cond
                ((org-element-property :contents-begin elm)
                 (buffer-substring
                  (org-element-property :contents-begin elm)
                  (org-element-property :contents-end elm)))
                (t
                 ""))))))
   (lambda (keyword desc format)
     (cond
      ((eq format 'html)
       (format "<font color=\"red\"><abbr title=\"%s\" color=\"red\">COMMENT</abbr></font> %s" keyword (or desc "")))
      ((eq format 'latex)
      ;; AJ: Ignore the description, format the link part inline
      (format "%% %s\n" keyword)))))
#+end_src

#+RESULTS:
: Created comment link.

** Ox-ipynb
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/elpa/ox-ipynb/")
  (require 'ox-ipynb)
#+END_SRC
** Org-habit
<2018-06-11 Mon>
Playing around with org-habit to help Sumanth get the consistency
graph working
#+BEGIN_SRC emacs-lisp
(require 'org-habit)
#+END_SRC
** Org-gnome
#+BEGIN_SRC emacs-lisp
  ;; (require 'org-gnome) 
  ;; (setq org-gnome-integrate-with-calendar t)
  ;; (org-gnome-turn-on)
#+END_SRC
** Org-babel-screen
#+BEGIN_SRC elisp
(require 'org-babel-screen) 
#+END_SRC
** Better Ediff for org-mode
<2018-10-26 Fri>
From [[https://emacs.stackexchange.com/questions/21335/prevent-folding-org-files-opened-by-ediff][here]]
#+BEGIN_SRC elisp
;; Check for org mode and existence of buffer
(defun f-ediff-org-showhide (buf command &rest cmdargs)
  "If buffer exists and is orgmode then execute command"
  (when buf
    (when (eq (buffer-local-value 'major-mode (get-buffer buf)) 'org-mode)
      (save-excursion (set-buffer buf) (apply command cmdargs)))))

(defun f-ediff-org-unfold-tree-element ()
  "Unfold tree at diff location"
  (f-ediff-org-showhide ediff-buffer-A 'org-reveal)  
  (f-ediff-org-showhide ediff-buffer-B 'org-reveal)  
  (f-ediff-org-showhide ediff-buffer-C 'org-reveal))

(defun f-ediff-org-fold-tree ()
  "Fold tree back to top level"
  (f-ediff-org-showhide ediff-buffer-A 'hide-sublevels 1)  
  (f-ediff-org-showhide ediff-buffer-B 'hide-sublevels 1)  
  (f-ediff-org-showhide ediff-buffer-C 'hide-sublevels 1))

(add-hook 'ediff-select-hook 'f-ediff-org-unfold-tree-element)
(add-hook 'ediff-unselect-hook 'f-ediff-org-fold-tree)
#+END_SRC

#+RESULTS:
| f-ediff-org-fold-tree |

* Autocomplete
** Require auto-complete
#+BEGIN_SRC emacs-lisp
(require 'auto-complete)
(require 'auto-complete-config)
(ac-config-default)
#+END_SRC
** Special autocomplete modes
*** Latex
#+BEGIN_SRC emacs-lisp
(require 'ac-math) 
(add-to-list 'ac-modes 'latex-mode)   ; make auto-complete aware of `latex-mode`

 (defun ac-LaTeX-mode-setup () ; add ac-sources to default ac-sources
   (setq ac-sources
         (append '(ac-source-math-unicode ac-source-math-latex ac-source-latex-commands)
                 ac-sources))
   )
(add-hook 'LaTeX-mode-hook 'ac-LaTeX-mode-setup)
;(global-auto-complete-mode t)
 
(setq ac-math-unicode-in-math-p t)
(setq ac-math-unicode-in-math-p t)
#+END_SRC
[2019-01-07 Mon]
#+begin_src emacs-lisp
(setq org-latex-pdf-process
(quote ("pdflatex -shell-escape -interaction nonstopmode %f" "bibtex %b" "bibtex %b" "pdflatex -shell-escape -interaction nonstopmode %f" "pdflatex -shell-escape -interaction nonstopmode %f")))
#+end_src

#+RESULTS:
| pdflatex -shell-escape -interaction nonstopmode %f | bibtex %b | bibtex %b | pdflatex -shell-escape -interaction nonstopmode %f | pdflatex -shell-escape -interaction nonstopmode %f |

* Latex
** Syntax Highlighting for code Export
#+BEGIN_SRC emacs-lisp
;; Add minted to the defaults packages to include when exporting.
(add-to-list 'org-latex-packages-alist '("" "minted"))
;; Tell the latex export to use the minted package for source
;; code coloration.
 (setq org-latex-listings 'minted)
;; Let the exporter use the -shell-escape option to let latex
;; execute external programs.
;; This obviously and can be dangerous to activate!
;; When using minted, use this:
 (setq org-latex-pdf-process
 (quote ("pdflatex -shell-escape -interaction nonstopmode %f" "bibtex %b" "bibtex %b" "pdflatex -shell-escape -interaction nonstopmode %f" "pdflatex -shell-escape -interaction nonstopmode %f")))
#+END_SRC

#+RESULTS:
| pdflatex -shell-escape -interaction nonstopmode %f | bibtex %b | bibtex %b | pdflatex -shell-escape -interaction nonstopmode %f | pdflatex -shell-escape -interaction nonstopmode %f |

** PDFLATEX command execution order in org mode export
#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process
 (quote ("pdflatex  --shell-escape %f" "bibtex %b" "bibtex %b" "pdflatex  %f" "pdflatex %f")))
#+END_SRC

#+RESULTS:
| pdflatex  --shell-escape %f | bibtex %b | bibtex %b | pdflatex  %f | pdflatex %f |

** Auctex latex export style
[2019-01-28 Mon]
#+begin_src emacs-lisp
(setq LaTeX-command-style '(("" "%(PDF)%(latex) %(file-line-error) %(extraopts) -shell-escape %S%(PDFout)")))
#+end_src

#+RESULTS:
|   | %(PDF)%(latex) %(file-line-error) %(extraopts) -shell-escape %S%(PDFout) |
** Synctex
[2019-01-28 Mon]
#+begin_src emacs-lisp

   (setq TeX-source-correlate-method (quote synctex))
   (setq TeX-source-correlate-mode t)
   (setq TeX-source-correlate-start-server t)
   (setq TeX-view-program-list (quote (("Okular" "okular --unique %o#src:%n%b"))))
   ;;(setq TeX-view-program-selection (quote ((engine-omega "dvips and gv") (output-dvi "xdvi") (output-pdf "Okular") (output-html "xdg-open")))))
#+end_src

#+RESULTS:
| Okular | okular --unique %o#src:%n%b |

** My customizations
[2019-01-28 Mon]
#+begin_src emacs-lisp


   (setq TeX-auto-save t)
   (setq TeX-parse-self t)
   (setq-default TeX-master nil)

   (require 'reftex)
   (add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode

    (add-to-list 'load-path "~/.emacs.d/lisp/")
   (require 'company-auctex)
  (company-auctex-init)
#+end_src

#+RESULTS:
| (company-auctex-macros company-auctex-symbols company-auctex-environments) | company-auctex-bibs | company-auctex-labels | company-bbdb | company-nxml | company-css | company-eclim | company-semantic | company-clang | company-xcode | company-cmake | company-capf | company-files | (company-dabbrev-code company-gtags company-etags company-keywords) | company-oddmuse | company-dabbrev |

* Utilities
** Magit
<2018-04-04 Wed>
#+BEGIN_SRC emacs-lisp
   (require 'magit)
  (global-set-key (kbd "C-x g") 'magit-status)
#+END_SRC
** Magit todos   
<2018-09-10 Mon>
#+BEGIN_SRC elisp
(require 'magit-todos)
#+END_SRC
* Unsorted
#+BEGIN_SRC emacs-lisp
  ;; (use-package ox-latex-subfigure
  ;; :init
  ;;   (setq org-latex-caption-above nil
  ;;         org-latex-prefer-user-labels t)
  ;;   :load-path "~/.emacs.d/elpa/ox-latex-subfigure/"
  ;;   :config (require 'ox-latex-subfigure))
  (add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/") t)
  ;;;;; move between buffers using shift arrows
  ;;(when (fboundp 'windmove-default-keybindings)
  ;;  (windmove-default-keybindings))

  ;; Currently replaced ^ keybinding with the switch-window setting. Might change back if that is too distracting
  ;; Disable the splash screen (to enable it agin, replace the t with 0)
  (setq inhibit-splash-screen t)

  ;; Enable transient mark mode
  (transient-mark-mode 1)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)

  (add-to-list 'load-path "~/.emacs.d/lisp/")
#+END_SRC
* Personal lisp code
** Create Analysis
[2019-01-21 Mon]
 #+begin_src emacs-lisp
   (defun aj/create-new-analysis ()
     "Prompts user for key words and creates a folder and org file using this name"
     (interactive)
     (setq analysisfolder "~/jalihal_projects/Research/Analysis/")
     (setq analysisname  (concat
                          (format-time-string "%F")
                          "-"
                          ;; This line prompts user for some keywords and replaces
                          ;; the spaces with hyphens
                          (replace-regexp-in-string "\\( \\)" "-" (read-string "Key words: "))))

     (make-directory (concat analysisfolder analysisname))
     (setq fpath (concat analysisfolder analysisname "/" analysisname ".org"))
     (message (concat "creating" fpath))
     (setq sessionname (read-string "Session name? [pythonsession] " nil nil "pythonsession"))
     (write-region (concat "#+PROPERTY: header-args:python :session "
                           sessionname
                           " :tangle yes :comment link\n"
                           "#+LATEX_HEADER: \\usemintedstyle{tango}%colorful\n"
                           "#+LATEX_HEADER: \\usepackage{xcolor}\n"
                           "#+LATEX_HEADER: \\definecolor{bg}{rgb}{0.9,0.9,0.9}\n"
                           "#+LATEX_HEADER: \\setminted{linenos=True,bgcolor=bg}\n"
                           "#+LATEX_HEADER: \\usepackage[bottom=0.5in,margin=1in]{geometry}\n"
                           "#+BEGIN_SRC python\n"
                           "import numpy as np\n"
                           "import matplotlib.pyplot as plt\n"
                           "import pandas as pd\n"
                           "#+END_SRC ")
                   nil fpath)
     (switch-to-buffer (find-file fpath)))
 #+end_src

 #+RESULTS:
 : aj/create-new-analysis

** Dired quicklinks
[2018-12-26 Wed]
#+BEGIN_SRC emacs-lisp
  (defhydra aj/dired-links (:color blue)
  "
                                      Quick Links to various directories
                                      ..................................
                                      _r_esearch      _d_ownloads      _e_macs     
                                      _m_odel         _D_ocuments      e_l_feed
  "
    ("r" (dired "~/jalihal_projects/Research/" ) "research")
    ("d" (dired "~/Downloads/" ) "downloads")
    ("D" (dired "~/Documents/" ) "documents")
    ("m" (dired "~/jalihal_projects/Research/data/ModelAnalysis/" ) "model")
    ("e" (dired "~/.emacs.d" ) "emacs config")
    ("l" (dired "~/orgs/elfeed.org" ) "elfeed config")
    ("q" nil "quit")
)

#+END_SRC

#+RESULTS:
: aj/dired-links/body

** Hydras
[2019-01-21 Mon]
 #+BEGIN_SRC emacs-lisp
   (require 'hydra)

   (defhydra aj/hydra-interface (:color blue)
   "

                                                     ^What would you like to do?^                         
                                                     ...........................                          
                                          ^Org^                 ^Quick Links^
                                          ^---^                 ^-----------^
                                         _A_nalysis            _C_onfig.org
                                                               _L_abnotebook
                                         
   
   "
     ("A" aj/create-new-analysis "Analyis")
     ("d" aj/dired-links/body "dired")
     ("C" (find-file "~/.emacs.d/simmons_config.org") "config.org")
     ("L" (find-file "~/jalihal_projects/Research/LabNoteBook.org") "labnotebook.org")
     ("q" nil "quit")
     )
     (define-key global-map (kbd "C-c h") 'aj/hydra-interface/body)
     ;; h for hydra!!

 #+END_SRC

 #+RESULTS:
 : aj/hydra-interface/body
[2019-01-28 Mon]
Latex helpers
#+begin_src emacs-lisp
  (defhydra aj/tex-interface (:color blue)
  "

  ^What would you like to do?^                         
  ...........................                          
   _t_oc                   
   _v_ariable pitch
   _p_review buffer
  "
    ("t" reftex-toc "TOC")
    ("v" variable-pitch-mode "variable")
    ("p" preview-buffer "preview")
    ("q" nil "quit")
    )
    (define-key LaTeX-mode-map (kbd "C-c t") 'aj/tex-interface/body)
    ;; h for hydra!!

#+end_src

#+RESULTS:
: aj/tex-interface/body
